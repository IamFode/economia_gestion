residual(y,x) # si es positivo predice un valor inferior al de y_i
summary(lm(y~x))
beta1(y,x)
beta0(y,x)
residual(y,x) # si es positivo predice un valor inferior al de y_i
residual(y,x) # si es positivo predice un valor inferior al de y_i
residual(y,x) # si es positivo predice un valor inferior al de y_i
# librarias y funciones
source("funciones.R")
library(ggplot2)
residual(y,x) # si es positivo predice un valor inferior al de y_i
############################## EJERCICIO 2.4 ###################################
# Salario y educación
# y = salario en dolares por hora
# x = educación en años
load("~/git/ciencias_sociales/economia/econometria/R/wooldridge/data/wage1.RData")
y = data$wage
x = data$educ
summary(lm(y~x))
beta1(y,x)
beta0(y,x)
# residual
residual <- function(y,x){
n <- length(x)
res <- 0
for (i in 1:n){
res <- res + ( y[i] - beta0(y,x) - beta1(y,x)*x[i] )
return(res)
}
}
# residual
residual <- function(y,x){
n <- length(x)
res <- 0
for (i in 1:n+1){
res <- res + ( y[i] - beta0(y,x) - beta1(y,x)*x[i] )
return(res)
}
}
residual(y,x) # si es positivo predice un valor inferior al de y_i
# librarias y funciones
source("funciones.R")
library(ggplot2)
residual(y,x) # si es positivo predice un valor inferior al de y_i
# librarias y funciones
source("funciones.R")
library(ggplot2)
residual(y,x) # si es positivo predice un valor inferior al de y_i
residual(y,x) # si es positivo predice un valor inferior al de y_i
residual(y,x) # si es positivo predice un valor inferior al de y_i
# librarias y funciones
source("funciones.R")
library(ggplot2)
residual(y,x) # si es positivo predice un valor inferior al de y_i
ml&residual
ml$residuals
m1$resifuals
m1$residuals
m1<-summary(lm(y~x))
m1$residuals
sum(m1$residuals)
m1<-summary(lm(y~x))
m1$residuals
mean(m1$residuals)
sum(m1$residuals)
sum(summary(lm(y~x)$residuals)
sum(summary(lm(y~x)$residuals))
sum(summary(lm(y~x)$residuals)))
sum(summary(lm(y~x)$residuals))
sum(lm(y~x)$residuals)
summary(lm(y~x))
sum(lm(y~x)$residuals)
beta1(y,x)
beta0(y,x)
residual(y,x) # si es positivo predice un valor inferior al de y_i
lm(y~x)$residuals
residual(y,x) # si es positivo predice un valor inferior al de y_i
# librarias y funciones
source("funciones.R")
library(ggplot2)
residual(y,x) # si es positivo predice un valor inferior al de y_i
residual(y,x) # si es positivo predice un valor inferior al de y_i
residual(y,x) # si es positivo predice un valor inferior al de y_i
# librarias y funciones
source("funciones.R")
residual(y,x) # si es positivo predice un valor inferior al de y_i
# residual
residual <- function(y,x){
res <- 0
for (i in 1:length(x)){
res <- res + ( y[i] - beta0(y,x) - beta1(y,x)*x[i] )
print(res)
}
}
residual(y,x) # si es positivo predice un valor inferior al de y_i
residual(y,x) # si es positivo predice un valor inferior al de y_i
sum(lm(y~x)$residuals)
residual(y,x) # si es positivo predice un valor inferior al de y_i
sum(lm(y~x)$residuals)
residual(y,x) # si es positivo predice un valor inferior al de y_i
residual(y,x) # si es positivo predice un valor inferior al de y_i
# librarias y funciones
source("funciones.R")
library(ggplot2)
residual(y,x) # si es positivo predice un valor inferior al de y_i
residual(y,x) # si es positivo predice un valor inferior al de y_i
# librarias y funciones
source("funciones.R")
residual(y,x) # si es positivo predice un valor inferior al de y_i
summary(lm(y~x))
sum(lm(y~x)$residuals)
beta1(y,x)
beta0(y,x)
residual(y,x) # si es positivo predice un valor inferior al de y_i
summary(lm(y~x))
beta1(y,x)
beta0(y,x)
residual(y,x) # si es negativo predice un valor superior al de y_i
covmuestra(y,x)
covmuestral(y,x)
# librarias y funciones
source("funciones.R")
library(ggplot2)
covmuestral(y,x)
# librarias y funciones
source("funciones.R")
meanyhat(y,x)
meanyhat(y,x)
# librarias y funciones
source("funciones.R")
meanyhat(y,x)
meanyhat(y,x)
# librarias y funciones
source("funciones.R")
meanyhat(y,x)
meanyhat(y,x)
# librarias y funciones
source("funciones.R")
library(ggplot2)
meanyhat(y,x)
meanyhat(y,x)
mean(y)
#media
media <- function(x){
sum <- 0
for (i in 1:length(x)){
sum <- sum + i
}
return(sum/length(x))
}
# SST
SST(x)
# SST
SST(y)
# librarias y funciones
source("funciones.R")
# SST
SST(y)
# SST
SST(y)
# funciones
source("funciones.R")
# SST
SST(y)
# funciones
source("funciones.R")
# SSE
SST(y)
# SST
SST(y)
# SSE
SSE(y)
# SST
SST(y)
# SSE
SSE(y)
# SSR
SSR(y,x)
### varianza muestral de y SST/(n-1)
SST(Y)/(length(y)-1)
### varianza muestral de y SST/(n-1)
SST(y)/(length(y)-1)
var(y)
var(y)/2
### varianza muestral de y SST/(n-1)
SST(y)/(length(y)-1)
var(y)
# SST
SST(y)
y
sum(y)
sum((y - mean(y))^2)
sum((y - mean(y))^2)/(length(n)-1)
sum((y - mean(y))^2)/(length(y)-1)
var(y)
# funciones
source("funciones.R")
# SST
SST(y)
#media
media <- function(x){
sum <- 0
for (i in 1:length(x)){
sum <- sum + i
}
return(sum/length(x))
}
# funciones
source("funciones.R")
# SST
SST(y)
media(y)
mean(y)
media(y)
mean(y)
media(y)
#media
media <- function(x){
sum <- 0
for (i in 1:length(x)){
sum <- sum + i
}
return(sum/length(x))
}
mean(y)
media(y)
#media
media <- function(x){
sum <- 0
for (i in 1:length(x)){
sum <- sum + i
}
return(sum)
}
media(y)
media(y)
sum(y)
mean(y)
media(y)
sum(y)
media(y)
sum(y)
#media
media <- function(x){
sum <- 0
for (i in 1:length(x)){
sum <- sum + i
}
return(sum)
}
media(y)
sum(y)
#media
media <- function(x){
sum <- 0
for (i in 1:length(x)){
sum <- sum + y[i]
}
return(sum)
}
media(y)
sum(y)
# funciones
source("funciones.R")
### varianza muestral de y SST/(n-1)
SST(y)/(length(y)-1)
var(y)
# SST
SST(y)
# SST = SSE +SSR
SSE(y) SSR(y,x)
# SST = SSE +SSR
SSE(y) + SSR(y,x)
# SSE
SSE(y)
# funciones
source("funciones.R")
# SST = SSE +SSR
SSE(y) + SSR(y,x)
# SST
SST(y)
############################## EJERCICIO 2.4 ###################################
# Salario y educación
# y = salario en dolares por hora
# x = educación en años
load("~/git/ciencias_sociales/economia/econometria/R/wooldridge/data/wage1.RData")
y = data$wage
x = data$educ
summary(lm(y~x))
sum(lm(y~x)$residuals)
beta1(y,x)
beta0(y,x)
# [2.30]
residual(y,x) # si es positivo predice un valor inferior al de y_i
#[2.31]
covmuestral(y,x)
# [2.32]
meanyhat(y,x)
mean(y)
ggplot(data = data, aes(educ, wage)) +
geom_point( color = "black", size = 2) +
geom_smooth(method = lm, formula = y~x, color = "blue") +
xlab("Eduación en años") +
ylab("Salario en dolares por hora") +
ggtitle("Salario y educación")
# un año adicional de educación hace que el salario por hora aumente en 46c/hora
salario <- function(edu){
return(beta0(y,x)+beta1(y,x)*edu)
}
salario(0)
salario(8)
# SST
SST(y)
### varianza muestral de y SST/(n-1)
SST(y)/(length(y)-1)
var(y)
# SSE
SSE(y)
# SSR
SSR(y,x)
# SST = SSE +SSR
SSE(y) + SSR(y,x)
# SST
SST(y)
### varianza muestral de y SST/(n-1)
SST(y)/(length(y)-1)
var(y)
# SSE
SSE(y)
# SSR
SSR(y,x)
# SST = SSE +SSR
SSE(y) + SSR(y,x)
# SST
SST(y)
# SST = SSE +SSR
SSE(y) + SSR(y,x)
# SSR
SSR(y,x)
# SSE
SSE(y)
# funciones
source("funciones.R")
# SST = SSE +SSR
SSE(y) + SSR(y,x)
# SST
SST(y)
### varianza muestral de y SST/(n-1)
SST(y)/(length(y)-1)
var(y)
# SSE
SSE(y)
# SSR
SSR(y,x)
# SST = SSE +SSR
SSE(y) + SSR(y,x)
# SSE suma explicada de cuadrados
SSE <- function(y){
sum <- 0
for (i in 1:length(y)){
sum <- sum + (y[i]-mean(y))^2
}
return(sum)
}
# SST suma de cuadrados totales
SST <- function(y){
sum <- 0
for (i in 1:length(y)){
sum <- sum + (y[i]-mean(y))^2
}
return(sum)
}
# funciones
source("funciones.R")
# SST = SSE +SSR
SSE(y) + SSR(y,x)
# SST
SST(y)
# SSE
SSE(y)
# SSR
SSR(y,x)
# SST = SSE +SSR
SSE(y) + SSR(y,x)
# funciones
source("funciones.R")
# SSE
SSE(y)
# SSR
SSR(y,x)
# SST = SSE +SSR
SSE(y) + SSR(y,x)
# SST
SST(y)
r2(y,x)
# Bondad de ajuste R^2
r2 <- function(yx){
return(1-SSR/SST)
}
r2(y,x)
# Bondad de ajuste R^2
r2 <- function(y,x){
return(1-SSR/SST)
}
r2(y,x)
# Bondad de ajuste R^2
r2 <- function(y,x){
return(1-SSR/SST)
}
r2(y,x)
# SSE suma explicada de cuadrados
SSE <- function(y){
sum <- 0
for (i in 1:length(y)){
sum <- sum + (beta0(y,x)+beta1(y,x)*x[i]-mean(y))^2
}
return(sum)
}
SSR <- function(y,x){
res <- 0
for (i in 1:length(x)){
res <- res + (y[i]-beta0(y,x)-beta1(y,x)*x[i])^2
}
return(res)
}
# Bondad de ajuste R^2
r2 <- function(y,x){
return(1-SSR/SST)
}
r2(y,x)
# Bondad de ajuste R^2
r2 <- function(y,x){
return(1-SSR(y,x)/SST(y,x))
}
r2(y,x)
x
r2(y,x)
# Bondad de ajuste R^2
r2 <- function(y,x){
return(1-SSR(y,x)/SST(y,x))
}
r2(y,x)
r2(y,x)
# Bondad de ajuste R^2
r2 <- function(y,x){
return( 1-SSR(y,x)/SST(y) )
}
r2(y,x)
lm(y~x)
summary(lm(y~x))
install.packages("wooldridge")
library(wooldridge)
wage1
attach(wave1)
y = wage1$salary
x = wage1$roe
y = wage1$salary
x = wage1$roe
y
wage1$educ
y = wage1$educ
y = wage1$wage
x = wage1$educ
summary(lm(y~x))
r2(y,x)
summary(lm(y~x))
y = ceosal1$salary
x = ceosal1$roe
################################## funciones ###################################
source("funciones.R")
################################## funciones ###################################
source("funciones.R")
################################## Ejemplo 2.8 #################################
# En la regresión de salarios de CEO obtenemos
r2(y,x)
r2(y,x)
################################## Ejemplo 2.9 #################################
y = vote1$voteA
x = vote2$shareA
r2(y,x)
################################## Ejemplo 2.9 #################################
y = vote1$voteA
x = vote2$shareA
################################## Ejemplo 2.9 #################################
vote1$voteA
################################## Ejemplo 2.9 #################################
y <- vote1$voteA
x <- vote2$shareA
r2(y,x)
# y = porcentaje de votos obtenidos por el candidato A
# x = porcentaje del total de los gastos de campaña atribuidos al candidato A
y = vote1$voteA
x = vote2$shareA
# y = porcentaje de votos obtenidos por el candidato A
# x = porcentaje del total de los gastos de campaña atribuidos al candidato A
vote1$voteA
# y = porcentaje de votos obtenidos por el candidato A
# x = porcentaje del total de los gastos de campaña atribuidos al candidato A
x <- vote1$voteA
# y = porcentaje de votos obtenidos por el candidato A
# x = porcentaje del total de los gastos de campaña atribuidos al candidato A
y <- vote1$voteA
x <- vote2$shareA
vote2$shareA
# y = porcentaje de votos obtenidos por el candidato A
# x = porcentaje del total de los gastos de campaña atribuidos al candidato A
y <- vote1$voteA
x <- vote1$shareA
################################## Ejemplo 2.9 #################################
y <- vote1$voteA
x <- vote1$shareA
r2(y,x)
