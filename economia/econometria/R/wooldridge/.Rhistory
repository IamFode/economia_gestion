media(y)
mean(y)
media(y)
mean(y)
media(y)
#media
media <- function(x){
sum <- 0
for (i in 1:length(x)){
sum <- sum + i
}
return(sum/length(x))
}
mean(y)
media(y)
#media
media <- function(x){
sum <- 0
for (i in 1:length(x)){
sum <- sum + i
}
return(sum)
}
media(y)
media(y)
sum(y)
mean(y)
media(y)
sum(y)
media(y)
sum(y)
#media
media <- function(x){
sum <- 0
for (i in 1:length(x)){
sum <- sum + i
}
return(sum)
}
media(y)
sum(y)
#media
media <- function(x){
sum <- 0
for (i in 1:length(x)){
sum <- sum + y[i]
}
return(sum)
}
media(y)
sum(y)
# funciones
source("funciones.R")
### varianza muestral de y SST/(n-1)
SST(y)/(length(y)-1)
var(y)
# SST
SST(y)
# SST = SSE +SSR
SSE(y) SSR(y,x)
# SST = SSE +SSR
SSE(y) + SSR(y,x)
# SSE
SSE(y)
# funciones
source("funciones.R")
# SST = SSE +SSR
SSE(y) + SSR(y,x)
# SST
SST(y)
############################## EJERCICIO 2.4 ###################################
# Salario y educación
# y = salario en dolares por hora
# x = educación en años
load("~/git/ciencias_sociales/economia/econometria/R/wooldridge/data/wage1.RData")
y = data$wage
x = data$educ
summary(lm(y~x))
sum(lm(y~x)$residuals)
beta1(y,x)
beta0(y,x)
# [2.30]
residual(y,x) # si es positivo predice un valor inferior al de y_i
#[2.31]
covmuestral(y,x)
# [2.32]
meanyhat(y,x)
mean(y)
ggplot(data = data, aes(educ, wage)) +
geom_point( color = "black", size = 2) +
geom_smooth(method = lm, formula = y~x, color = "blue") +
xlab("Eduación en años") +
ylab("Salario en dolares por hora") +
ggtitle("Salario y educación")
# un año adicional de educación hace que el salario por hora aumente en 46c/hora
salario <- function(edu){
return(beta0(y,x)+beta1(y,x)*edu)
}
salario(0)
salario(8)
# SST
SST(y)
### varianza muestral de y SST/(n-1)
SST(y)/(length(y)-1)
var(y)
# SSE
SSE(y)
# SSR
SSR(y,x)
# SST = SSE +SSR
SSE(y) + SSR(y,x)
# SST
SST(y)
### varianza muestral de y SST/(n-1)
SST(y)/(length(y)-1)
var(y)
# SSE
SSE(y)
# SSR
SSR(y,x)
# SST = SSE +SSR
SSE(y) + SSR(y,x)
# SST
SST(y)
# SST = SSE +SSR
SSE(y) + SSR(y,x)
# SSR
SSR(y,x)
# SSE
SSE(y)
# funciones
source("funciones.R")
# SST = SSE +SSR
SSE(y) + SSR(y,x)
# SST
SST(y)
### varianza muestral de y SST/(n-1)
SST(y)/(length(y)-1)
var(y)
# SSE
SSE(y)
# SSR
SSR(y,x)
# SST = SSE +SSR
SSE(y) + SSR(y,x)
# SSE suma explicada de cuadrados
SSE <- function(y){
sum <- 0
for (i in 1:length(y)){
sum <- sum + (y[i]-mean(y))^2
}
return(sum)
}
# SST suma de cuadrados totales
SST <- function(y){
sum <- 0
for (i in 1:length(y)){
sum <- sum + (y[i]-mean(y))^2
}
return(sum)
}
# funciones
source("funciones.R")
# SST = SSE +SSR
SSE(y) + SSR(y,x)
# SST
SST(y)
# SSE
SSE(y)
# SSR
SSR(y,x)
# SST = SSE +SSR
SSE(y) + SSR(y,x)
# funciones
source("funciones.R")
# SSE
SSE(y)
# SSR
SSR(y,x)
# SST = SSE +SSR
SSE(y) + SSR(y,x)
# SST
SST(y)
r2(y,x)
# Bondad de ajuste R^2
r2 <- function(yx){
return(1-SSR/SST)
}
r2(y,x)
# Bondad de ajuste R^2
r2 <- function(y,x){
return(1-SSR/SST)
}
r2(y,x)
# Bondad de ajuste R^2
r2 <- function(y,x){
return(1-SSR/SST)
}
r2(y,x)
# SSE suma explicada de cuadrados
SSE <- function(y){
sum <- 0
for (i in 1:length(y)){
sum <- sum + (beta0(y,x)+beta1(y,x)*x[i]-mean(y))^2
}
return(sum)
}
SSR <- function(y,x){
res <- 0
for (i in 1:length(x)){
res <- res + (y[i]-beta0(y,x)-beta1(y,x)*x[i])^2
}
return(res)
}
# Bondad de ajuste R^2
r2 <- function(y,x){
return(1-SSR/SST)
}
r2(y,x)
# Bondad de ajuste R^2
r2 <- function(y,x){
return(1-SSR(y,x)/SST(y,x))
}
r2(y,x)
x
r2(y,x)
# Bondad de ajuste R^2
r2 <- function(y,x){
return(1-SSR(y,x)/SST(y,x))
}
r2(y,x)
r2(y,x)
# Bondad de ajuste R^2
r2 <- function(y,x){
return( 1-SSR(y,x)/SST(y) )
}
r2(y,x)
lm(y~x)
summary(lm(y~x))
install.packages("wooldridge")
library(wooldridge)
wage1
attach(wave1)
y = wage1$salary
x = wage1$roe
y = wage1$salary
x = wage1$roe
y
wage1$educ
y = wage1$educ
y = wage1$wage
x = wage1$educ
summary(lm(y~x))
r2(y,x)
summary(lm(y~x))
y = ceosal1$salary
x = ceosal1$roe
################################## funciones ###################################
source("funciones.R")
################################## funciones ###################################
source("funciones.R")
################################## Ejemplo 2.8 #################################
# En la regresión de salarios de CEO obtenemos
r2(y,x)
r2(y,x)
################################## Ejemplo 2.9 #################################
y = vote1$voteA
x = vote2$shareA
r2(y,x)
################################## Ejemplo 2.9 #################################
y = vote1$voteA
x = vote2$shareA
################################## Ejemplo 2.9 #################################
vote1$voteA
################################## Ejemplo 2.9 #################################
y <- vote1$voteA
x <- vote2$shareA
r2(y,x)
# y = porcentaje de votos obtenidos por el candidato A
# x = porcentaje del total de los gastos de campaña atribuidos al candidato A
y = vote1$voteA
x = vote2$shareA
# y = porcentaje de votos obtenidos por el candidato A
# x = porcentaje del total de los gastos de campaña atribuidos al candidato A
vote1$voteA
# y = porcentaje de votos obtenidos por el candidato A
# x = porcentaje del total de los gastos de campaña atribuidos al candidato A
x <- vote1$voteA
# y = porcentaje de votos obtenidos por el candidato A
# x = porcentaje del total de los gastos de campaña atribuidos al candidato A
y <- vote1$voteA
x <- vote2$shareA
vote2$shareA
# y = porcentaje de votos obtenidos por el candidato A
# x = porcentaje del total de los gastos de campaña atribuidos al candidato A
y <- vote1$voteA
x <- vote1$shareA
################################## Ejemplo 2.9 #################################
y <- vote1$voteA
x <- vote1$shareA
r2(y,x)
# librarias y funciones
library(ggplot2)
library(wooldridge)
############################## EJERCICIO 2.3 ###################################
# Sueldo de los directores generales (CEO) y rendimiento sobre le capital
y = ceosal1$salary
x = ceosal1$roe
############################## EJERCICIO 2.4 ###################################
# Salario y educación
# y = salario en dolares por hora
# x = educación en años
load("~/git/ciencias_sociales/economia/econometria/R/wooldridge/data/wage1.RData")
############################## EJERCICIO 2.4 ###################################
# Salario y educación
# y = salario en dolares por hora
# x = educación en años
y = wage1$wage
x = wage1$educ
############################## EJERCICIO 2.5 ###################################
# Resultados de una votación y gastos de campaña
# y = porcentaje de votos obtenidos por el candidato A
# x = porcentaje del total de los gastos de campaña atribuidos al candidato A
y <- vote1$voteA
x <- vote1$shareA
############################## EJERCICIO 2.3 ###################################
# Sueldo de los directores generales (CEO) y rendimiento sobre le capital
y = ceosal1$salary
x = ceosal1$roe
summary(y)
summary(x)
summary(lm(y~x))
beta1(y,x)
beta0(y,x)
residual(y,x) # si es positivo predice un valor inferior al de y_i
ggplot(data = data, aes(roe, salary)) +
geom_point( color = "black", size = 2) +
geom_smooth(method = lm, formula = y~x, color = "blue") +
xlab("Rendimiento sobre el capital (ROE) en %") +
ylab("Salario en Dolares") +
ggtitle("Sueldo de los directores generales (CEO) y rendimiento sobre el capital")
ggplot(data = data, aes(roe, salary)) +
geom_point( color = "black", size = 2) +
geom_smooth(method = lm, formula = y~x, color = "blue") +
xlab("Rendimiento sobre el capital (ROE) en %") +
ylab("Salario en Dolares") +
ggtitle("Sueldo de los directores generales (CEO) y rendimiento sobre el capital")
sueldo <- function(roe){
return(beta0(y,x)+beta1(y,x)*roe)
}
library(wooldridge)
rm(data,desc,m1)
library(wooldridge)
# librarias y funciones
library(ggplot2)
library(wooldridge)
ggplot(data = wooldridge, aes(roe, salary)) +
geom_point( color = "black", size = 2) +
geom_smooth(method = lm, formula = y~x, color = "blue") +
xlab("Rendimiento sobre el capital (ROE) en %") +
ylab("Salario en Dolares") +
ggtitle("Sueldo de los directores generales (CEO) y rendimiento sobre el capital")
wooldridge::admnrev
ggplot(aes(x, y)) +
geom_point( color = "black", size = 2) +
geom_smooth(method = lm, formula = y~x, color = "blue") +
xlab("Rendimiento sobre el capital (ROE) en %") +
ylab("Salario en Dolares") +
ggtitle("Sueldo de los directores generales (CEO) y rendimiento sobre el capital")
sueldo <- function(roe){
return(beta0(y,x)+beta1(y,x)*roe)
}
sueldo(30)
rm(self,res)
attach()
attach(wooldridge)
library(wooldridge)
ceosal1$salary
ceosal1$salary*1000
log(wage)
log(wage1$wage)
beta0(y,x)
################################# Ejemplo 2.10 #################################
y <- log(wage1$wage)
x <- wage1$educ
beta0(y,x)
################################# Ejemplo 2.10 #################################
y <- log(wage1$wage)
x <- wage1$educ
beta0(y,x)
beta1(y,x)
length(y)
################################# Ejemplo 2.10 #################################
y <- log(wage1$wage)
x <- wage1$educ
beta0(y,x)
beta1(y,x)
length(y)
r2(y,x)
################################# Ejemplo 2.11 #################################
y <- log(ceosal1$salary)
x <- log(ceosal1$sales)
beta1(y,x)
beta0(y,x)
length(y)
r2(y,x)
################################# Ejemplo 2.11 #################################
y <- log(ceosal1$salary)
x <- log(ceosal1$sales)
beta1(y,x)
beta0(y,x)
length(y)
r2(y,x)
#
var <- function(x){
sum <- 0
for (i in 1:length(x)){
sum <- sum + ( x[i] - mean(x) )^2
}
return(sum)
}
var1 <- function(x){
sum <- 0
for (i in 1:length(x)){
sum <-  sum + x[i]^2
}
return(sum - length(x)*(mean(x))^2)
}
var(x)
var1(x)
dos <- function(x){
sum <- 0
for (i in 1:length(x)){
sum <-  sum + x[i]*y[i]
}
return( sum - ( length(x)*mean(x)*mean(y) ) )
}
uno <- function(x,y){
sum <- 0
for (i in 1:length(x)){
sum <- sum + (x[i]*(y[i] - mean(x)))
}
return(sum)
}
dos <- function(x,y){
sum <- 0
for (i in 1:length(x)){
sum <-  sum + x[i]*y[i]
}
return( sum - ( length(x)*mean(x)*mean(y) ) )
}
uno(x,y)
dos(x,y)
uno <- function(x,y){
sum <- 0
for (i in 1:length(x)){
sum <- sum + ( x[i]*( y[i] - mean(y) ) )
}
return(sum)
}
dos <- function(x,y){
sum <- 0
for (i in 1:length(x)){
sum <-  sum + x[i]*y[i]
}
return( sum - ( length(x)*mean(x)*mean(y) ) )
}
uno(x,y)
dos(x,y)
uno <- function(x,y){
sum <- 0
for (i in 1:length(x)){
sum <- sum + ( x[i]*( y[i] - mean(y) ) )
}
return(sum)
}
uno1 <- function(x,y){
sum <- 0
for (i in 1:length(x)){
sum <- sum + ( y[i]*( x[i] - mean(x) ) )
}
return(sum)
}
dos <- function(x,y){
sum <- 0
for (i in 1:length(x)){
sum <-  sum + x[i]*y[i]
}
return( sum - ( length(x)*mean(x)*mean(y) ) )
}
uno(x,y)
uno1(x,y)
dos(x,y)
n*(mean(x))^2
length(x)*(mean(x))^2
prueb <- function(x){
sum <- 0
for (i in 1:length(x)){
sum <- sum + mean(x)^2
}
}
prueb(x)
length(x)*(mean(x))^2
prueb <- function(x){
sum <- 0
for (i in 1:length(x)){
sum <- sum + mean(x)^2
}
return(sum)
}
prueb(x)
length(x)*(mean(x))^2
