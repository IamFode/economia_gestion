library("readxl")
install.packages(readxl)
install.packages(readxl)
install.packages("readxl")
library("readxl")
library(readxl)
Datos_Suposto1_1_Exercicio_1_4_Dougherty_1_ <- read_excel("data/Datos Suposto1. 1 Exercicio 1.4 Dougherty (1).xls")
View(Datos_Suposto1_1_Exercicio_1_4_Dougherty_1_)
View(Datos_Suposto1_1_Exercicio_1_4_Dougherty_1_)
data = read_excel("data/Datos Suposto1. 1 Exercicio 1.4 Dougherty (1).xls")
lm(data$GDP~data$EMPLOY)
summary(lm(data$GDP~data$EMPLOY))
summary(lm(data$EMPLOY~data$GDP))
summary(lm(EMPLOY~GDP,data=data))
summary(lm(EMPLOY~(1/GDP),data=data))
summary(lm(EMPLOY~(1/GDP),data=data))
#Grafica
plot(data$GDP,data$EMPLOY)
?plot
#Grafica
plot(data$GDP,data$EMPLOY,type="b")
#Grafica
plot(data$GDP,data$EMPLOY,xlab = "GDB", ylab = EMPLOY)
#Grafica
plot(data$GDP,data$EMPLOY,xlab = "GDB", ylab = "EMPLOY")
data["1/GDB"] = 1/data$GDP
plot(data$GDP,data$EMPLOY,xlab = "1/GDB", ylab = "EMPLOY")
#Grafica
plot(data$GDP,data$EMPLOY,xlab = "GDB", ylab = "EMPLOY")
plot(data$GDP,data$EMPLOY,xlab = "1/GDB", ylab = "EMPLOY")
data
plot(data$GDP,data$EMPLOY,xlab = "1/GDB", ylab = "EMPLOY")
plot(data$`1/GDB`,data$EMPLOY,xlab = "1/GDB", ylab = "EMPLOY")
#Modelo Lineal
summary(lm(EMPLOY~GDP,data=data))
#Utilizando la inversa de GDB
summary(lm(EMPLOY~1/GDP,data=data))
#Utilizando la inversa de GDB
summary(lm(EMPLOY~"1/GDP",data=data))
#Utilizando la inversa de GDB
summary(lm(EMPLOY~`1/GDB`,data=data))
#Utilizando la inversa de GDB
summary(lm(EMPLOY~GDB,data=data))
#Utilizando la inversa de GDB
summary(lm(EMPLOY~(1/GDB),data=data))
#Utilizando la inversa de GDB
summary(lm(EMPLOY~log(GDB),data=data))
#Utilizando la inversa de GDB
summary(lm(EMPLOY~log(GDB),data=data))
#Utilizando la inversa de GDB
summary(lm(EMPLOY~log(GDP),data=data))
#Utilizando la inversa de GDB
summary(lm(EMPLOY~log(1/GDP),data=data))
#Utilizando la inversa de GDB
summary(lm(EMPLOY~1/GDP,data=data))
#Utilizando la inversa de GDB
summary(lm(EMPLOY~(1/GDP),data=data))
#Utilizando la inversa de GDB
summary(lm(EMPLOY~(1/(GDP)),data=data))
#Utilizando la inversa de GDB
summary(lm(EMPLOY~(GDP^(-1)),data=data))
#Utilizando la inversa de GDB
summary(lm(EMPLOY~I(1/GDP),data=data))
rm(data["1/GDB"])
rm(data$`1/GDB`)
del(data$`1/GDB`)
rm(data$`1/GDB`)
data["1/GDB"] = NULL
data = read_excel("data/Datos Suposto1. 1 Exercicio 1.4 Dougherty (1).xls")
plot(1/data$GDP,data$EMPLOY,xlab = "1/GDB", ylab = "EMPLOY")
#Grafica
plot(data$GDP,data$EMPLOY,xlab = "GDB", ylab = "EMPLOY")
plot(1/data$GDP,data$EMPLOY,xlab = "1/GDB", ylab = "EMPLOY")
#Utilizando la inversa de GDB
summary(lm(EMPLOY~I(1/GDP),data=data))
#Utilizando la inversa de GDB
names(summary(lm(EMPLOY~I(1/GDP),data=data)))= c("Employ","1/GDP")
summary(lm(EMPLOY~I(1/GDP),data=data))
#Utilizando la inversa de GDB
names(summary(lm(EMPLOY~I(1/GDP),data=data))) = c("Employ","1/GDP")
#Utilizando la inversa de GDB
names(summary(lm(EMPLOY~I(1/GDP),data=data))) = c("EMPLOY","1/GDP")
#Utilizando la inversa de GDB
names(summary(lm(data$EMPLOY~I(1/GDP),data=data))) = c("EMPLOY","1/GDP")
#Utilizando la inversa de GDB
summary(lm(EMPLOY~I(1/GDP),data=data))
#Grafica
lineal= lm(EMPLOY~GDP,data=data)
summary(lineal)
plot(data$GDP,data$EMPLOY,xlab = "GDB", ylab = "EMPLOY")
abline(lineal)
#Utilizando la inversa de GDB
1/DBP = lm(EMPLOY~I(1/GDP),data=data)
#Utilizando la inversa de GDB
inversa_DBP = lm(EMPLOY~I(1/GDP),data=data)
#Utilizando la inversa de GDB
inversa_DBP = lm(EMPLOY~I(1/GDP),data=data)
summary(inversa_DBP)
plot(1/data$GDP,data$EMPLOY,xlab = "1/GDB", ylab = "EMPLOY")
abline(inversa_DBP)
#Grafica
lineal = lm(EMPLOY~GDP,data=data)
summary(lineal)
plot(data$GDP,data$EMPLOY,xlab = "GDB", ylab = "EMPLOY")
abline(lineal)
abline(inversa_DBP)
#Utilizando la inversa de GDB
inversa_DBP = lm(EMPLOY~I(1/GDP),data=data)
summary(inversa_DBP)
plot(1/data$GDP,data$EMPLOY,xlab = "1/GDB", ylab = "EMPLOY")
abline(inversa_DBP)
#Grafica
lineal = lm(EMPLOY~GDP,data=data)
summary(lineal)
plot(data$GDP,data$EMPLOY,xlab = "GDB", ylab = "EMPLOY")
abline(lineal)
#Utilizando la inversa de GDB
inversa_DBP = lm(EMPLOY~I(1/GDP),data=data)
summary(inversa_DBP)
plot(1/data$GDP,data$EMPLOY,xlab = "1/GDB", ylab = "EMPLOY")
abline(inversa_DBP)
lines(1/data$GDP))
lines((1/data$GDP))
lines((1/data$GDP),fitted(inversa_DBP))
plot(1/data$GDP,data$EMPLOY,xlab = "1/GDB", ylab = "EMPLOY")
lines((1/data$GDP),fitted(inversa_DBP))
library("ggplot2")
ggplot(data,aes(GDP,EMPLOY))+
geom_point() +
geom_smooth(method = "lm", formula = EMPLOY~0+I(1/GDP))
ggplot(data,aes(GDP,EMPLOY))+
geom_point() +
geom_smooth(method = "lm", formula = EMPLOY~0+I(1/GDP),color="red")
ggplot(data,aes(GDP,EMPLOY))+
geom_point() +
geom_smooth(method = "lm", formula = EMPLOY~0+I(1/GDP),color="red")
ggplot(data,aes(GDP,EMPLOY))+
geom_point() +
geom_smooth(method = "lm", formula = EMPLOY~I(1/GDP),color="red")
ggplot(data,aes(GDP,EMPLOY))+
geom_point() +
geom_smooth(method = "lm", formula = y~I(1/x),color="red")
ggplot(data,aes(GDP,EMPLOY))+
geom_point() +
geom_smooth(method = "lm", formula = y~I(1/x),color="red")+
geom_smooth(method = "lm", formula = y~x,color="blue")
# Modelo lineal
lineal = lm(EMPLOY~GDP,data=data)
summary(lineal)
#Modelo inversa de GDB
inversa_DBP = lm(EMPLOY~I(1/GDP),data=data)
summary(inversa_DBP)
#Gráfica
ggplot(data,aes(GDP,EMPLOY))+
geom_point() +
geom_smooth(method = "lm", formula = y~I(1/x),color="red")+
geom_smooth(method = "lm", formula = y~x,color="blue")
#Gráfica
ggplot(data,aes(GDP,EMPLOY))+
geom_point() +
geom_smooth(method = "lm", formula = y~I(1/x),color="red")+
geom_smooth(method = "lm", formula = y~I(x^2),color="red")+
geom_smooth(method = "lm", formula = y~x,color="blue")
# Modelo lineal
lineal = lm(EMPLOY~GDP,data=data)
summary(lineal)
#Modelo inversa de GDB
inversa_DBP = lm(EMPLOY~I(1/GDP),data=data)
summary(inversa_DBP)
lines((1/data$GDP),fitted(inversa_DBP))
#Gráfica
ggplot(data,aes(GDP,EMPLOY))+
geom_point() +
geom_smooth(method = "lm", formula = y~I(1/x),color="red")+
geom_smooth(method = "lm", formula = y~x,color="blue")
#Gráfica
ggplot(data,aes(GDP,EMPLOY))+
geom_point() +
geom_smooth(method = "lm", formula = y~I(1/x),color="red")+
geom_smooth(method = "lm", formula = y~x,color="blue")+
geom_hline(0)
#Gráfica
ggplot(data,aes(GDP,EMPLOY))+
geom_point() +
geom_smooth(method = "lm", formula = y~I(1/x),color="red")+
geom_smooth(method = "lm", formula = y~x,color="blue")+
geom_hline()
#Gráfica
ggplot(data,aes(GDP,EMPLOY))+
geom_point() +
geom_smooth(method = "lm", formula = y~I(1/x),color="red")+
geom_smooth(method = "lm", formula = y~x,color="blue")+
geom_hline(20)
#Gráfica
ggplot(data,aes(GDP,EMPLOY))+
geom_point() +
geom_smooth(method = "lm", formula = y~I(1/x),color="red")+
geom_smooth(method = "lm", formula = y~x,color="blue")+
geom_hline(yintercept=20)
#Gráfica
ggplot(data,aes(GDP,EMPLOY))+
geom_point() +
geom_smooth(method = "lm", formula = y~I(1/x),color="red")+
geom_smooth(method = "lm", formula = y~x,color="blue")+
geom_hline(yintercept=0)
#Gráfica
ggplot(data,aes(GDP,EMPLOY))+
geom_point() +
geom_smooth(method = "lm", formula = y~I(1/x),color="red")+
geom_smooth(method = "lm", formula = y~x,color="blue")+
geom_hline(yintercept=0, color = "yellow")
#Gráfica
ggplot(data,aes(GDP,EMPLOY))+
geom_point() +
geom_smooth(method = "lm", formula = y~I(1/x),color="red")+
geom_smooth(method = "lm", formula = y~x,color="blue")+
geom_hline(yintercept=0, color = "black")
data = read_excel("/data/'Datos Spuesto 1.2.xlsx'")
data = read_excel("data/Datos Spuesto 1.2.xlsx")
data = read_excel("../data/Datos Spuesto 1.2.xlsx")
data = read_excel("data/Datos Supuesto 1.2.xlsx")
data = read_excel("data/Datos Supuesto 1.2.xlsx")
data
View(data)
data = read_excel("data/Datos Supuesto 1.2.xlsx",sheet = 2)
data = read_excel("data/Datos Supuesto 1.2.xlsx",sheet = 1)
data = read_excel("data/Datos Supuesto 1.2.xlsx",col_names = c("x","y"))
data = read_excel("data/Datos Supuesto 1.2.xlsx")
data[3,]
data
data[3,]
data
data[,2]
data = read_excel("data/Datos Supuesto 1.2.xlsx")
data = data[,3]
data
data = read_excel("data/Datos Supuesto 1.2.xlsx")
data = data[,1;3]
data = data[,1:3]
data
data = data[,1:3]
data
# Modelo 1
lineal = lm(y~x,data=data)
data
#data
data = read_excel("data/Datos Supuesto 1.2.xlsx")
data = data[,1:3]
# Modelo 1
lineal = lm(Y~X,data=data)
summary(lineal)
#Gráfica
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "lm", formula = y~x,color="red")
# Modelo 1
lineal = lm(Y~X,data=data)
summary(lineal)
#Gráfica
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "lm", formula = y~x,color="red")
# Modelo 2
square = lm(Y~X+I(X^2),data = data)
summary(square)
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "lm", formula = y~I(x^2),color="red")
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "lm", formula = y~x+I(x^2),color="red")
# Modelo Modelo de elasticidad constante o modelo logarítmico.
log = lm(Y~\log(X),data=data)
# Modelo Modelo de elasticidad constante o modelo logarítmico.
log = lm(Y~\log(X),data=data)
summary(log)
# Modelo Modelo de elasticidad constante o modelo logarítmico.
log = lm(Y~\log(X),data=data)
# Modelo Modelo de elasticidad constante o modelo logarítmico.
log = lm(Y~log(X),data=data)
summary(log)
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "lm", formula = y~x+log(x),color="red")
# Modelo Modelo de elasticidad constante o modelo logarítmico.
log = lm(log(Y)~log(X),data=data)
summary(log)
# Modelo Modelo de elasticidad constante o modelo logarítmico.
log = lm(log(Y)~log(X),data=data)
summary(log)
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "lm", formula = log(y)~log(x),color="red")
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "lm", formula = log(y)~x+log(x),color="red")
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "lm", formula = log(y)~x+log(x),color="red")
# Modelo Modelo de elasticidad constante o modelo logarítmico.
log = lm(log(Y)~log(X),data=data)
summary(log)
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "lm", formula = log(y)~log(x),color="red")
# El modelo log-livel o modelo semilogaritmico
slog = lm(log(Y)~X,data=data)
summary(slog)
# El modelo log-livel o modelo semilogaritmico
slog = lm(log(Y)~X,data=data)
summary(slog)
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "lm", formula = log(y)~x,color="red")
# El modelo log-livel o modelo semilogaritmico
slog = lm(log(Y)~X,data=data)
summary(slog)
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "lm", formula = log(y)~x,color="red")
# Modelo Modelo de elasticidad constante o modelo logarítmico.
log = lm(log(Y)~log(X),data=data)
summary(log)
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "lm", formula = log(y)~log(x),color="red")
# El modelo log-livel o modelo semilogaritmico
slog = lm(log(Y)~X,data=data)
summary(slog)
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "lm", formula = log(y)~x,color="red")
# El modelo log-livel o modelo semilogaritmico
slog = lm(log(Y)~X,data=data)
summary(slog)
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "glm", formula = log(y)~x,color="red")
# El modelo log-livel o modelo semilogaritmico
slog = lm(log(Y)~X,data=data)
summary(slog)
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "gam", formula = log(y)~x,color="red")
# El modelo log-livel o modelo semilogaritmico
slog = lm(log(Y)~X,data=data)
summary(slog)
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "loess", formula = log(y)~x,color="red")
# El modelo log-livel o modelo semilogaritmico
slog = lm(log(Y)~X,data=data)
summary(slog)
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "lm", formula = log(y)+y~x,color="red")
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "lm", formula = log(y)~x,color="red")
# El modelo log-livel o modelo semilogaritmico
slog = lm(log(Y)~X,data=data)
summary(slog)
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "lm", formula = I(log(y))~x,color="red")
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "glm", formula = log(y)~x,method.args=List(family=gaussian((link='log'))),color="red")
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "glm", formula = log(y)~x,method.args=List(family=gaussian((link='log'))),color="red")
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "glm",
formula = y~x,
method.args=List(family=gaussian((link='log'))),
color="red")
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "glm",
formula = y~x,
method.args=list(family=gaussian((link='log'))),
color="red")
# El modelo log-livel o modelo semilogaritmico
slog = lm(log(Y)~X,data=data)
summary(slog)
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "llm",
formula = y~x,
method.args=list(family=gaussian((link='log'))),
color="red")
# El modelo log-livel o modelo semilogaritmico
slog = lm(log(Y)~X,data=data)
summary(slog)
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "nlm",
formula = y~x,
method.args=list(family=gaussian((link='log'))),
color="red")
# El modelo log-livel o modelo semilogaritmico
slog = lm(log(Y)~X,data=data)
summary(slog)
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "lm",
formula = y~x,
method.args=list(family=gaussian((link='log'))),
color="red")
# El modelo log-livel o modelo semilogaritmico
slog = lm(log(Y)~X,data=data)
summary(slog)
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "nls",
formula = y~x,
method.args=list(family=gaussian((link='log'))),
color="red")
# El modelo log-livel o modelo semilogaritmico
slog = lm(log(Y)~X,data=data)
summary(slog)
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "nls", formula = log(y)~log(x),color="red")
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "nls",
formula = y~x,
method.args=list(family=gaussian((link='log-level'))),
color="red")
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "nls",
formula = y~x,
method.args=list(family=gaussian((link='log'))),
color="red")
# El modelo log-livel o modelo semilogaritmico
slog = lm(log(Y)~X,data=data)
summary(slog)
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "glm",
formula = y~x,
method.args=list(family=gaussian((link='log'))),
color="red")
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "glm",
formula = y~x,
method.args=list(family=gaussian((link='log level'))),
color="red")
?gaussian()
# El modelo log-livel o modelo semilogaritmico
slog = lm(log(Y)~X,data=data)
summary(slog)
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "glm",
formula = y~x,
method.args=list(family=gaussian((link='log'))),
color="red")
# 3. Modelo Modelo de elasticidad constante o modelo logarítmico.
log = lm(log(Y)~log(X),data=data)
summary(log)
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "gml", formula = log(y)~log(x),color="red")
# 3. Modelo Modelo de elasticidad constante o modelo logarítmico.
log = lm(log(Y)~log(X),data=data)
summary(log)
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "gml", formula = y~x,color="red")
# 3. Modelo Modelo de elasticidad constante o modelo logarítmico.
log = lm(log(Y)~log(X),data=data)
summary(log)
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "ml", formula = y~x,color="red")
# 3. Modelo Modelo de elasticidad constante o modelo logarítmico.
log = lm(log(Y)~log(X),data=data)
summary(log)
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "ml", formula = y~x,color="red")
# 3. Modelo Modelo de elasticidad constante o modelo logarítmico.
log = lm(log(Y)~log(X),data=data)
summary(log)
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "lm", formula = y~x,color="red")
# 3. Modelo Modelo de elasticidad constante o modelo logarítmico.
log = lm(log(Y)~log(X),data=data)
summary(log)
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "lm", formula = log(y)~log(x),color="red")
ggplot(data,aes(X,Y))+
geom_point() +
geom_smooth(method = "glm", formula = log(y)~log(x),color="red")
install.packages("DynareR")
'''{r Dynare R}
library(Dynare)
'''
library(Dynare)
library(DynareR)
```{r DynareR}
library(DynareR)
```
```{r DynareR}
