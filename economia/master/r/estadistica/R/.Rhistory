sum(table(epa$SEXO))
sum(epa$FACTOREL) # Factor de elevación de la muestra por diversos atributos
xtabs(FACTOREL~SEXO, data=epa) # Distribución de frecuencias ponderadas por el factor de elevación
xtabs(FACTOREL~SEXO, data=epa)/sum(epa$FACTOREL)*100
# Situación laboral
table(epa$AOI)
epa$OPI=factor(epa$AOI) # Agrupación de AOI en: Ocupados, parados e inactivos
levels(epa$OPI)=c("O","O","P","P","I","I","I")
table(epa$OPI)
table(epa$OPI)/length(epa$OPI)*100
xtabs(FACTOREL~OPI, data=epa)/sum(epa$FACTOREL)*100 # Distribución de frecuencias ponderadas por el factor de elevación
# Rangos de edad
table(epa$EDAD1)
epa$REDAD<- cut(epa$EDAD1, breaks = c(-1, 16, 30, 65) ) # Variable agrupada en intervalos
table(epa$REDAD)
sum(table(epa$REDAD))
levels(epa$REDAD)[1]<- "[0,20]"
table(epa$REDAD)
# Salvo en fichero una copia de los datos de EPA ya preparados
write.csv2(epa, file="../Dat/EPA/EPA_2021T2_prep.csv")
source("1.Preparar.EPA.R")
source("1.Preparar.EPA.R")
read.csv2(file="../Dat/EPA/EPA_2021T2_prep.csv",encoding = "UTF8")
epa <- read.csv2(file="../Dat/EPA/EPA_2021T2_prep.csv",encoding = "UTF8")
# Análisis univariante de EDAD
x <- epa$EDAD1
mean(x)
summary(x)
mean(x,na.rm=TRUE)
var(x) # csivarianza (varianza muestral)
sd(x)
var(x)*(length(x)-1)/length(x)
var(x)*(length(x)-1)/length(x) # varianza poblacional
mean((x-mean(x))^2)
sd(x)
var(x)*(length(x)-1)/length(x) # varianza poblacional
var(x) # cuasivarianza (varianza muestral)
mean((x-mean(x))^2)
var(x) # cuasivarianza (varianza muestral)
var(x)*(length(x)-1)/length(x) # varianza poblacional
mean((x-mean(x))^2)
sqrt(var(x)*(length(x)-1)/length(x)) # varianza poblacional
sd(x)
sqrt(var(x)*(length(x)-1)/length(x))mean(x) # coheficiente de variación
sqrt(var(x)*(length(x)-1)/length(x))/mean(x) # coheficiente de variación
cv = function(x){ #Fucnión que calculo el coeficiente de variación de un vector de datos x
sqrt(var(x)*(length(x)-1)/length(x))/mean(x)
}
source("Funciones.R")
cv(x)
quantile(x)
median(x)
quantile(x,0.92)
table(x)
## cómo crear una función moda
t <- table(x)
sort(t)
sort(t, TRUE)
sort(t, TRUE)[1]
source("Funciones.R")
moda(x)
## Gráficas
hist(x)
plot(density(x)) # represetación no paramétrica del histograma
hist(x, freq = FALSE)
lines(density(x),col = "red")
boxplot(x)
## Filtros
### Filtros horizontales --> variable condicionada
dat <- subset(epa, EDAD1>=16) #sobre toda la tabla
dat <- epa[epa$EDAD1>=16 & epa$SEXO == "M",]
dat <- epa[epa$EDAD1>=16 | epa$SEXO == "M",]
### Filtros verticales --> Selecionar variables
dat <- epa[epa$EDAD1>=16,"SEXO"]
### Filtros verticales --> Selecionar variables
dat <- epa[epa$EDAD1>=16,c("SEXO", "EDAD1")]
x <- dat$SEXO
y <- dat$EDAD1
by(y,x,mean)
source("Funciones.R")
source("1.Preparar.EPA.R")
by(y,x,cv)
E
y <- dat$EDAD1
by(y,x,mean) #media condicionada de la edad para cada sexo
by(y,x,cv)
source("Funciones.R")
source("1.Preparar.EPA.R")
#----------Análisis bivariante----------
x <- dat$SEXO
y <- dat$EDAD1
by(y,x,mean) #media condicionada de la edad para cada sexo
by(y,x,cv)
aggregate(y,list(x),mean) # tabla de la media
boxplot(y~x)
boxplot(y~x)
### Filtros verticales --> Selecionar variables
dat <- epa[epa$EDAD1>=16,c("SEXO", "EDAD1","REDAD")]
e
epa <- read.csv2(file="../Dat/EPA/EPA_2021T2_prep.csv",encoding = "UTF8")
### Filtros verticales --> Selecionar variables
dat <- epa[epa$EDAD1>=16,c("SEXO", "EDAD1","REDAD")]
table(x,y)
table(x,epa$REDAD)
table(x,dat$REDAD)
summ(table(x,dat$REDAD)/length(x)) # frecuencias relativas
sum(table(x,dat$REDAD)/length(x)) # frecuencias relativas
table(x,dat$REDAD)/length(x) # frecuencias relativas
prop.table(table(x, dat$REDAD), 1)
prop.table(table(x, dat$REDAD), 2)
prop.table(table(x, dat$REDAD), 1) # tabla de contingencias condicionada por filas
prop.table(table(x, dat$REDAD), 2) # tabla de contingencias condicionada por columnas
rm(x,y,t)
## Crear estadística los parados
aggregate(FACTOREL~SEXO,data = dat, sum)
### Filtros verticales --> Selecionar variables
dat <- epa[epa$EDAD1>=16,c("SEXO", "EDAD1","REDAD","FACTOREL")]
## Crear estadística los parados
aggregate(FACTOREL~SEXO,data = dat, sum)
### Filtros verticales --> Selecionar variables
dat <- epa[epa$EDAD1>=16,c("SEXO", "EDAD1","REDAD","FACTOREL","OPI")]
## Crear estadística los parados
aggregate(FACTOREL~SEXO,data = dat[dat$OPI=="P",], sum) #
## Crear estadística los parados
aggregate(FACTOREL~SEXO,data = dat[dat$OPI=="P",], length)
parados <- aggregate(FACTOREL~SEXO,data = dat[dat$OPI=="P",], sum)
names(parados)[2] <- "Parados"
parados <- aggregate(FACTOREL~SEXO,data = dat[dat$OPI=="P",], sum)
parados
names(parados)[2] <- "Parados"
parados
names(parados)[2] <- "Num Parados"
parados
names(parados)[2] <- "NumParados"
parados
activos <- aggregate(FACTOREL~SEXO,data = dat[dat$OPI!="I",], sum)
names(activos)[2] <- "NumActivos"
activos
### taza de parados
# fucionar dos tablas
merge(parados,activos)
s_epa$TasaParo <- s_epa$NumParados / s_epa$NumActivos
### taza de parados
s_epa <- merge(parados,activos) # fucionar dos tablas
s_epa$TasaParo <- s_epa$NumParados / s_epa$NumActivos
### taza de parados
s_epa <- merge(parados,activos) # fucionar dos tablas
s_epa$TasaParo <- s_epa$NumParados / s_epa$NumActivos*100
s_epa
diff(s_epa[,3]) # diferencia de parados
write.csv2(s_epa, file="../Dat/EPA/TasaParados.csv")
rm(epa,dat,parados,activos,s_epa)
epa <- read.csv2(file="../Dat/EPA/EPA_2021T2_prep.csv",encoding = "UTF8")
View(epa)
View(epa)
View(epa)
View(epa)
mean(x)
x <- epa$EDAD1
mean(x)
summary(x)
var(x) # cuasivarianza (varianza muestral)
sd(x) # cuasidesviación típica
plot(x)
mean(x,na.rm=TRUE) # Datos faltantes (na.rm = TRUE)
mean(x)
## Gráficas
hist(x) # histograma
## Gráficas
hist(x) # histograma
plot(density(x)) # represetación no paramétrica del histograma
### Sobre poner gráficas
hist(x, freq = FALSE)
lines(density(x),col = "red")
boxplot(x)
### Sobre poner gráficas
hist(x, freq = FALSE)
lines(density(x),col = "red")
var(x)*(length(x)-1)/length(x) # varianza poblacional
sqrt(var(x)*(length(x)-1)/length(x)) # Desviación típica
sqrt(var(x)*(length(x)-1)/length(x))/mean(x) # coeficiente de variación
mean((x-mean(x))^2)
cv(x)
median(x)
quantile(x)
quantile(x,0.92)
mean((x-mean(x))^2)
var(x)*(length(x)-1)/length(x) # varianza poblacional
mean(x,na.rm=TRUE) # Datos faltantes (na.rm = TRUE)
by(y,x,mean) # media condicionada de la edad para cada sexo
#----------Análisis bivariante----------
x <- dat$SEXO
y <- dat$EDAD1
by(y,x,mean) # media condicionada de la edad para cada sexo
#----------Análisis bivariante----------
x <- dat$SEXO
### Filtros verticales --> Selecionar variables
dat <- epa[epa$EDAD1>=16,c("SEXO", "EDAD1","REDAD","FACTOREL","OPI")]
#----------Análisis bivariante----------
x <- dat$SEXO
y <- dat$EDAD1
by(y,x,mean) # media condicionada de la edad para cada sexo
by(y,x,cv) # coeficiente de variación
aggregate(y,list(x),mean) # tabla de la media
boxplot(y~x)
by(y,x,moda)
list(x)
aggregate(y,list(x),mean) # tabla de la media
table(x,y)
table(x,y)
table(x,dat$REDAD)
table(x,dat$REDAD)/length(x) # frecuencias relativas
prop.table(table(x, dat$REDAD), 1) # tabla de contingencias condicionada por filas
prop.table(table(x, dat$REDAD), 2) # tabla de contingencias condicionada por columnas
rm(x,y,t)
## Crear estadística de los parados
aggregate(FACTOREL~SEXO,data = dat[dat$OPI=="P",], length) # factorel->
## Crear estadística de los parados
aggregate(FACTOREL~SEXO,data = dat[dat$OPI=="P",], sum) # factorel->
aggregate(FACTOREL~SEXO,data = dat[dat$OPI=="P",], length) # factorel-> Cuantos encuestados hay hombre y mujer
aggregate(FACTOREL~SEXO,data = dat[dat$OPI=="P",], sum) # inferencia la cantidad de parados
merge(parados,activos)
parados <- aggregate(FACTOREL~SEXO,data = dat[dat$OPI=="P",], sum)
names(parados)[2] <- "NumParados"
parados
activos <- aggregate(FACTOREL~SEXO,data = dat[dat$OPI!="I",], sum)
names(activos)[2] <- "NumActivos"
activos
merge(parados,activos)
s_epa = merge(parados,activos)
### taza de parados
s_epa <- merge(parados,activos) # fucionar dos tablas
s_epa$TasaParo <- s_epa$NumParados / s_epa$NumActivos*100
s_epa
diff(s_epa[,3]) # diferencia de parados
library(haven)
install.packages("haven")
# library
library(haven)
ga = as.data.frame(read_sav("../tarea/Dat/EH2020_GastosAlimentarios.sav"))
View(ga)
personas = as.data.frame(read_sav("../tarea/Dat/EH2020_Personas.sav"))
personas = as.data.frame(read_sav("../tarea/Dat/EH2020_Persona.sav"))
View(personas)
table(personas)
table(personas$depto)
View(personas)
table(personas$depto ~ personas$s02a_04)
table(personas$depto~personas$s02a_04)
table(personas$s02a_02)
32604/4488
ees <- read.table("../Dat/EES/EES_201.csv", header=TRUE, sep="", na.strings="NA", dec=".", strip.white=TRUE) # Carga de los microdatos de un trimestre de EPA
ees <- read.table("../Dat/EES/EES_2018.csv", header=TRUE, sep="", na.strings="NA", dec=".", strip.white=TRUE) # Carga de los microdatos de un trimestre de EPA
# Sexo
## str(epa$SEXO)
head(ees$SEXO)
summary(ees$SEXO)
table(ees$SEXO)
ees$SEXO <- factor(epa$SEXO)
ees$SEXO <- factor(ees$SEXO)
levels(ees$SEXO) <- c("H", "M")
table(ees$SEXO) # distribución de frecuencias
View(ees)
# Salario base
summary(ees$BASE)
# Salario base
str(ees$BASE)
x[is.na(x)]
# ANALISIS DE LOS SESGOS
## Datos faltantes
x <- ees$BASE
x[is.na(x)]
## Datos Atipico
boxplot(x)
c1 <- quantiles(x,0.25)
c1 <- quantile(x,0.25)
c1 <- quantile(x,0.25)
c3 <- quantile(x,0.75)
bi <- c1-1.5*(c3-c1)
bs <- c3-1.5*(c3-c1)
x[x<bi | x>bs]
bi <- c1-1.5*(c3-c1)
bs <- c3+1.5*(c3-c1)
x[x<bi | x>bs]
y <- x[!(x<bi | x>bs)] #iliminar datos atípicos
x[(x<bi | x>bs)] <- mean(x[!(x<bi | x>bs)])
# Salvo en fichero una copia de los datos de EPA ya preparados
write.csv2(epa, file="../Dat/EES/EES_2018_prep_prep.csv")
# Salvo en fichero una copia de los datos de EPA ya preparados
write.csv2(ees, file="../Dat/EES/EES_2018_prep_prep.csv")
rm(epa)
rm(x,y,c1,c3,bi,bs,ees)
read.csv2(file="../Dat/EPA/TasaParados.csv",encoding="UTF8")
s_ees <- read.csv2(file="../Dat/EPA/TasaParados.csv",encoding="UTF8")
s_epa <- read.csv2(file="../Dat/EPA/TasaParados.csv",encoding="UTF8")
# Salvo en fichero una copia de los datos de EPA ya preparados
write.csv2(ees, file="../Dat/EES/EES_2018_prep.csv")
ees <- read.table("../Dat/EES/EES_2018.csv", header=TRUE, sep="", na.strings="NA", dec=".", strip.white=TRUE) # Carga de los microdatos de un trimestre de EPA
# Sexo
## str(ees$SEXO)
head(ees$SEXO)
summary(ees$SEXO)
table(ees$SEXO)
ees$SEXO <- factor(ees$SEXO)
levels(ees$SEXO) <- c("H", "M")
table(ees$SEXO) # distribución de frecuencias
# Salario base
str(ees$BASE)
summary(ees$BASE)
# ANALISIS DE LOS SESGOS
## Datos faltantes
x <- ees$BASE
x[is.na(x)] <- mean(x,na.rm=TRUE) #sustituir por la media recortadatada
## Datos Atipico
boxplot(x)
c1 <- quantile(x,0.25)
c3 <- quantile(x,0.75)
bi <- c1-1.5*(c3-c1)
bs <- c3+1.5*(c3-c1)
x[x<bi | x>bs]
y <- x[!(x<bi | x>bs)] #iliminar datos atípicos
x[(x<bi | x>bs)] <- mean(x[!(x<bi | x>bs)])
# Salvo en fichero una copia de los datos de EPA ya preparados
write.csv2(ees, file="../Dat/EES/EES_2018_prep.csv")
rm(x,y,c1,c3,bi,bs,ees)
s_epa <- read.csv2(file="../Dat/EPA/TasaParados.csv",encoding="UTF8")
ees <- read.csv2(file = "../Dat/EES/EES_2018_prep_prep.csv",encoding =  "UTF8")
aggregate(BASE~SEXO, data = datees, mean)
aggregate(BASE~SEXO, data = ees, mean)
s_ees = aggregate(BASE~SEXO, data = ees, mean)
merge(s_epa,s_ees)
merge(s_epa,s_ees)[c(1,3,4,5)]
merge(s_epa,s_ees)[c(1,3,4,5,6)]
ipc <- read.csv2(file="../Dat/IPC/IPC_mensual.csv",encoding="UTF8")
View(ipc)
View(ipc)
ipc <- read.csv2(file="../Dat/IPC/IPC_mensual.csv",encoding="UTF8", header=TRUE)
View(ipc)
ipc <- read.csv2(file="../Dat/IPC/IPC_mensual.csv",encoding="UTF8", header=FALSE)
View(ipc)
ipc <- read.csv2(file="../Dat/IPC/IPC_mensual.csv",encoding="UTF8", header=TRUE)
ipc <- read.csv2(file="../Dat/IPC/IPC_mensual.csv",encoding="UTF8", header=TRUE)
ipc <- read.csv(file="../Dat/IPC/IPC_mensual.csv",encoding="UTF8", header=TRUE)
View(ipc)
ipc <- read.csv2(file="../Dat/IPC/IPC_mensual.csv",encoding="UTF8", header=TRUE)
View(ipc)
ipc <- read.csv2(file="../Dat/IPC/IPC_mensual.csv",encoding="UTF8", header=TRUE)
ipc <- read.csv2(file="../Dat/IPC/IPC_mensual.csv",encoding="UTF8")
ipc <- read.csv(file="../Dat/IPC/IPC_mensual.csv",encoding="UTF8")
ipc <- read.csv2(file="../Dat/IPC/IPC_mensual.csv",encoding="UTF8"))
ipc <- read.csv2(file="../Dat/IPC/IPC_mensual.csv",encoding="UTF8"))
ipc <- read.csv(file="../Dat/IPC/IPC_mensual.csv",encoding="UTF8"))
ipc <- read.csv2(file="../Dat/IPC/IPC_mensual.csv",encoding="UTF8")
ipc <- read.csv2(file="../Dat/IPC/IPC_mensual.csv",encoding="UTF8")
ipc <- read.csv2(file="../Dat/IPC/IPC_mensual.csv",encoding="UTF8")
ipc
plot(ipc)
ipc.ts <- ts(ipc$IPC, start = c(2002,1) frequency = 12)
ipc <- read.csv2(file="../Dat/IPC/IPC_mensual.csv",encoding="UTF8")
ipc <- read.csv2(file="../Dat/IPC/IPC_mensual.csv")
ipc <- read.csv2(file="../Dat/IPC/IPC_mensual.csv",encoding="latin1")
ipc <- read.csv2(file="../Dat/IPC/IPC_mensual.csv",,stringFactors=FALSE,encoding="latin1")
ipc <- read.csv2(file="../Dat/IPC/IPC_mensual.csv",,stringAsFactors=FALSE,fencoding="latin1")
ipc <- read.csv2(file="../Dat/IPC/IPC_mensual.csv",,stringsAsFactors=FALSE,fencoding="latin1")
ipc <- read.csv2(file="../Dat/IPC/IPC_mensual.csv",,stringsAsFactors=FALSE,encoding="latin1")
ipc <- read.csv2(file="../Dat/IPC/IPC_mensual.csv",,stringsAsFactors=FALSE,encoding="latin1")
View(ipc)
View(ipc)
ipc <- read.csv2(file="../Dat/IPC/IPC_mensual.csv",encoding="UTF8")
ipc <- read.csv2(file="../Dat/IPC/IPC_mensual.csv",encoding="UTF8")
plot(ipc)
ipc.ts <- ts(ipc$IPC, start = c(2002,1) frequency = 12)
ipc.ts <- ts(ipc$IPC, start = c(2002,1), frequency = 12)
plot(ipc.ts)
ipc.comp <- descompose(ipc.ts, type = "additive")
ipc.comp <- decompose(ipc.ts, type = "additive")
plot(ipc.comp)
plot(ipc.comp, label="Mes")
plot(ipc.ts)
plot(ipc.comp, label="Mes")
plot(ipc.comp, xlabel="Mes")
plot(ipc.ts)
ipc.comp <- decompose(ipc.ts, type = "additive")
plot(ipc.comp, xlabel="Mes")
plot(ipc.comp, xlab="Mes")
ipc <- read.csv2(file="../Dat/IPC/IPC_mensual.csv",encoding="UTF8")
ipc.ts <- ts(ipc$IPC, start = c(2002,1), frequency = 12)
plot(ipc.ts)
ipc.comp <- decompose(ipc.ts, type = "additive")
plot(ipc.comp, xlab="Mes")
plot(ipc.ts, type="o", xlab = "Mes", ylab = "IPC (%)")
plot(ipc.ts, type="l", xlab = "Mes", ylab = "IPC (%)")
plot(ipc.comp, xlab="Mes")
plot(ipc.ts, type="l", xlab = "Mes", ylab = "IPC (%)")
# Descomposición aditiva
ipc.comp <- decompose(ipc.ts, type = "additive")
# Descomposición aditiva
ipc.comp <- decompose(ipc.ts, type = "additive") # Descompone la serie
# Descomposición aditiva
ipc.comp <- decompose(ipc.ts, type = "additive") # Descompone la serie
plot(ipc.comp, xlab="Mes")
barplot(ipc.com$figure)
barplot(ipc.comp$figure)
barplot(ipc.comp$figure, names = factor(1:12))
ts.plot(ipc.ts, lty = "solid", col = "black", xlab = "Mes", ylab = "IPC")
ts.plot(ipc.ts-ipc,comp$seasonal, lty = "solid", col = "black", xlab = "Mes", ylab = "IPC")
ts.plot(ipc.ts-ipc.comp$seasonal,comp$seasonal, lty = "solid", col = "black", xlab = "Mes", ylab = "IPC")
# Descomposición aditiva
ipc.comp <- decompose(ipc.ts, type = "additive") # Descompone la serie
ts.plot(ipc.ts-ipc.comp$seasonal,comp$seasonal, lty = "solid", col = "black", xlab = "Mes", ylab = "IPC")
ts.plot(ipc.ts-ipc.comp$seasonal, lty = "solid", col = "black", xlab = "Mes", ylab = "IPC")
ts.plot(cbind(t), lty = c("solid","dashed"), col = c("black","blue"), xlab = "Mes", ylab = "IPC")
# las series juntas anteriores juntas
t <- ipc.ts, ipc.ts - ipc.comp$seasonal
ts.plot(cbind(t), lty = c("solid","dashed"), col = c("black","blue"), xlab = "Mes", ylab = "IPC")
# las series juntas anteriores juntas
t <- cbind(ipc.ts, ipc.ts - ipc.comp$seasonal)
ts.plot(t, lty = c("solid","dashed"), col = c("black","blue"), xlab = "Mes", ylab = "IPC")
ts.plot(t, lty = c("solid","dashed"), col = c("black","red"), xlab = "Mes", ylab = "IPC")
legend("bottomright",c("Series original", "Serie desestacionalizada"))
legend("bottomright",c("Series original", "Serie desestacionalizada"), lty = c("solid","dashed"), col = c("black","red"))
ts.plot(t, lty = c("solid","dashed"), col = c("black","red"), xlab = "Mes", ylab = "IPC")
legend("bottomright",c("Series original", "Serie desestacionalizada"), lty = c("solid","dashed"), col = c("black","red"))
legend("bottomright",c("Series original", "Serie desestacionalizada"), lty = c("solid","dashed"), col = c("black","red"),lwd=(1,1))
legend("bottomright",c("Series original", "Serie desestacionalizada"), lty = c("solid","dashed"), col = c("black","red"),lwd=c(1,1))
legend("bottonleft",c("Series original", "Serie desestacionalizada"), lty = c("solid","dashed"), col = c("black","red"),lwd=c(1,1))
legend("bottomleft",c("Series original", "Serie desestacionalizada"), lty = c("solid","dashed"), col = c("black","red"),lwd=c(1,1))
legend("bottomleft",c("Series original", "Serie desestacionalizada"), lty = c("solid","dashed"), col = c("black","red"),lwd=c(0.1,1))
legend("bottomleft",c("Series original", "Serie desestacionalizada"), lty = c("solid","dashed"), col = c("black","red"),lwd=c(1,1))
#
ipcSP <- ipc.comp$trend # ciclo tendencia
ipc$S <- ipc.comp$seasonal
ipc$U <- ipc.comp$random
ipc$Ano <- as.integer(substr(ipc$Mes, 1, 4))
ipc$Ano
ipca <- data.frame(Ano = seq(min(ipc$Ano, max(ipc$Ano))),)
ipca <- data.frame(Ano = seq(min(ipc$Ano, max(ipc$Ano))))
ipca
View(ipc)
ipc$Ano <- as.integer(substr(ipc$Mes, 1, 4))
ipca <- data.frame(Ano = seq(min(ipc$Ano, max(ipc$Ano))))
ipca
View(ipca)
View(ipca)
ipca <- data.frame(Ano = seq(min(ipc$Ano, max(ipc$Ano))),IPC=tapplay(ipc$IPC, ipc$Ano), mean)
ipca <- data.frame(Ano = seq(min(ipc$Ano, max(ipc$Ano))),IPC=tapply(ipc$IPC, ipc$Ano), mean)
ipca <- data.frame(Ano = seq(min(ipc$Ano, max(ipc$Ano))),IPC=tapply(ipc$IPC, ipc$Ano), mean)
ipca <- data.frame(Ano = seq(min(ipc$Ano, max(ipc$Ano))),IPC=tapply(ipc$IPC, ipc$Ano), mean)
ipca <- data.frame(Ano = seq(min(ipc$Ano, max(ipc$Ano)),IPC=tapply(ipc$IPC, ipc$Ano), mean))
ipca <- data.frame(Ano = seq(min(ipc$Ano), max(ipc$Ano)),IPC=tapply(ipc$IPC, ipc$Ano), mean)
ipca <- data.frame(Ano = seq(min(ipc$Ano), max(ipc$Ano)),IPC=tapply(ipc$IPC, ipc$Ano), mean))
ipca <- data.frame(Ano = seq(min(ipc$Ano), max(ipc$Ano)),IPC=tapply(ipc$IPC, ipc$Ano), mean)
ipca<- data.frame(Ano=seq(min(ipc$Ano), max(ipc$Ano)), IPC=tapply(ipc$IPC, ipc$Ano, mean))
ipca <- data.frame(Ano = seq(min(ipc$Ano), max(ipc$Ano)), IPC=tapply(ipc$IPC, ipc$Ano, mean))
plot(ipc)
plot(ipca)
ipca.ts <- ts(ipca$IPC, start = 2002)
ipca
## Para suavizar se puede utilizar medias mobiles de orden 3
ipca$P3 <- filter(ipca.ts, side = 2, rep(1/3,3))
lines(ipca$P3, lty = "dashed", col = "blue")
plot(ipca$IPC, lty="solid")
lines(ipca$P3, lty = "dashed", col = "blue")
plot(ipca$IPC, type="o", lty="solid")
lines(ipca$P3, lty = "dashed", col = "blue")
## Para suavizar se puede utilizar medias mobiles de orden 3
ipca$P3 <- filter(ipca.ts, side = 2, rep(1/3,3))
plot(ipca$IPC, type="o", lty="solid")
lines(ipca$P3, lty = "dashed", col = "blue")
## Para suavizar se puede utilizar medias mobiles de orden 3
plot(ipca$IPC, type="o", lty="solid")
ipca$P3 <- filter(ipca.ts, side = 2, rep(1/3,3))
lines(ipca$P3, lty = "dashed", col = "blue")
lm(IPC ~ Ano, data = ipca)
reg <- lm(IPC ~ Ano, data = ipca)
summary(req)
summary(req)
summary(reg)
## Para suavizar se puede utilizar medias mobiles de orden 3
ipca.ts<- ts(ipca$IPC, start = 2002)
# Medias móviles de orden 3
plot(ipca$IPC, type="o")
plot(ipca$IPC, lty="solid")
plot(ipca$IPC, type="o")
lines(ipca$P3, lty = "dashed", col = "blue")
plot(ipca$P5,type = "o")
## Medias modeviles de orden 5
ipca$P5 <- filter(ipca.ts, side = 2, rep(1/5,5)#mm5
## Medias modeviles de orden 5
ipca$P5 <- filter(ipca.ts, sides = 2, rep(1/5,5)#mm5
## Medias modeviles de orden 5
ipca$P5 <- filter(ipca.ts, sides = 2, rep(1/5,5)#mm5
plot(ipca$P5,type = "o")
plot(ipca$IPC, type="o")
plot(ipca$P5, type = "o")
ipca$P3 <- filter(ipca.ts, sides = 2, rep(1/3,3)) #mm3
plot(ipca$IPC, type="o")
lines(ipca$P3, lty = "dashed", col = "blue")
plot(ipca$P3, type="o")
lines(ipca$P3, lty = "dashed", col = "blue")
plot(ipca$IPC, type="o")
lines(ipca$P3, lty = "dashed", col = "blue")
reg <- lm(IPC ~ Ano, data = ipca)
summary(reg)
## Medias modeviles de orden 5
ipca$P5 <- filter(ipca.ts, sides = 2, rep(1/5,5)) #mm5
plot(ipca$P5, type = "o")
plot(ipca$P5, type = "o")
abline(reg,col="red")
### La idea es realizar regresiones para series de tiempo más cortos
reg <- lm(IPC ~ Ano, data = ipca[ipca$Ano>2014,])
abline(reg, col="blue")
