# usando la transformación inversa (exponencial)
tinvde.x <- exp(tde$x)   #  x=t^{-1}(y)
# Obtenemos la densidad usando la regla de la cadena:
# Densidad basada en log(X_i) evaluada en tde$x por la derivada del logaritmo
tinvde.y <- tde$y * (1/tinvde.x)
# Plot simultáneo de histograma y densidad
{hist(s.new,freq=FALSE,breaks=15,xlab="PIB per c?pita promedio, 2010",
ylab=expression(paste("Estimador densidad  ", widehat(f[n]))),
main="",col = "lightblue", border = "pink",cex.lab=1.2, ylim=c(0,2))
lines(tinvde.x,tinvde.y, lwd = 2)
rug(s.new)}
s.new <- log(s)
# Estimación ncleo datos transformados
tde <- density(s.new, window = "gaussian")   # Estimación de f_Y vía kernel
# Plot de la densidad kernel para los datos transformados (t(X)=log(X))
par(mfrow=c(1,2))
{hist(s.new,freq=FALSE,breaks=18,xlab="% de población con estatus social baja",
ylab=expression(paste("Estimador kernel  ", widehat(g[n]))),
main="",col = "lightblue", border = "pink",cex.lab=1.2)
lines(tde, lwd = 2)
legend("topleft",legend="h=0.38",cex=1.2,bty="n")
rug(s.new)}
# Deshacemos la transformación
# Obtenemos los x en cuyos logaritmos se evalúa la densidad
# usando la transformación inversa (exponencial)
tinvde.x <- exp(tde$x)   #  x=t^{-1}(y)
# Obtenemos la densidad usando la regla de la cadena:
# Densidad basada en log(X_i) evaluada en tde$x por la derivada del logaritmo
tinvde.y <- tde$y * (1/tinvde.x)
# Plot simultáneo de histograma y densidad
{hist(s.new,freq=FALSE,breaks=15,xlab="PIB per c?pita promedio, 2010",
ylab=expression(paste("Estimador densidad  ", widehat(f[n]))),
main="",col = "lightblue", border = "pink",cex.lab=1.2, ylim=c(0,2))
lines(tinvde.x,tinvde.y, lwd = 2)
rug(s.new)}
s.new <- log(s)
ker <- density(s, window = "gaussian")   # Estimación de f_Y vía kernel
# Plot de la densidad kernel para los datos transformados (t(X)=log(X))
par(mfrow=c(1,2))
{hist(s,freq=FALSE,breaks=18,xlab="% de pob con estatus social baja",
ylab=expression(paste("Estimador kernel  ", widehat(g[n]))),
main="",col = "lightblue", border = "pink",cex.lab=1.2)
lines(tde, lwd = 2)
legend("topleft",legend="h=0.38",cex=1.2,bty="n")
rug(s.new)}
ker <- density(s, window = "gaussian")   # Estimación de f_Y vía kernel
# Plot de la densidad kernel para los datos transformados (t(X)=log(X))
par(mfrow=c(1,2))
{hist(s,freq=FALSE,breaks=18,xlab="% de pob con estatus social baja",
ylab=expression(paste("Estimador kernel  ", widehat(g[n]))),
main="",col = "lightblue", border = "pink",cex.lab=1.2)
lines(tde, lwd = 2)
legend("topleft",legend="h=0.38",cex=1.2,bty="n")
rug(s)}
ker <- density(s, window = "gaussian")   # Estimación de f_Y vía kernel
# Plot de la densidad kernel para los datos transformados (t(X)=log(X))
par(mfrow=c(1,2))
{hist(s,freq=FALSE,breaks=18,xlab="% de pob con estatus social baja",
ylab=expression(paste("Estimador kernel  ", widehat(g[n]))),
main="",col = "lightblue", border = "pink",cex.lab=1.2)
lines(ker, lwd = 2)
legend("topleft",legend="h=0.38",cex=1.2,bty="n")
rug(s)}
ker <- density(s, window = "gaussian")   # Estimación de f_Y vía kernel
# Plot de la densidad kernel para los datos transformados (t(X)=log(X))
{hist(s,freq=FALSE,breaks=18,xlab="% de pob con estatus social baja",
ylab=expression(paste("Estimador kernel  ", widehat(g[n]))),
main="",col = "lightblue", border = "pink",cex.lab=1.2)
lines(ker, lwd = 2)
legend("topleft",legend="h=0.38",cex=1.2,bty="n")
rug(s)}
install.packages(TDA)
install.packages("TDA")
load("/home/fode/Descargas/Datos_Practicas_Propuestas.RData")
rm
View(BostonHousing)
median(BostonHousing$rm)
subset(BostonHousing$rm,BostonHousing$rm<median(BostonHousing))
subset(BostonHousing$rm,BostonHousing$rm<median(BostonHousing$rm))
c1=subset(BostonHousing$rm,BostonHousing$rm>median(BostonHousing$rm))
c1
c1=subset(BostonHousing$rm,BostonHousing$rm<median(BostonHousing$rm))
c1=subset(BostonHousing$rm,BostonHousing$rm>median(BostonHousing$rm))
c1=subset(BostonHousing$rm,BostonHousing$rm<median(BostonHousing$rm))
c2=subset(BostonHousing$rm,BostonHousing$rm>median(BostonHousing$rm))
sm.density.compare(c(c1,c2),g=rep(1:2, each=100),model="equal")
library(sm)
library(sm)
library(sm)
sm.density.compare(c(c1,c2),g=rep(1:2, each=100),model="equal")
c1=subset(BostonHousing$rm,BostonHousing$rm<median(BostonHousing$rm))
c2=subset(BostonHousing$rm,BostonHousing$rm>median(BostonHousing$rm))
sm.density.compare(c(c1,c2),g=rep(1:2, each=100),model="equal")
c1=subset(BostonHousing$rm,BostonHousing$rm<median(BostonHousing$rm))
c2=subset(BostonHousing$rm,BostonHousing$rm>median(BostonHousing$rm))
sm.density.compare(c(c1,c2),g=rep(1:2, each=1000),model="equal")
c1
str(c1,c2)
str(c1)
str(c2)
sm.density.compare(c(c1,c2),g=rep(1:2, each=253),model="equal")
c1=subset(BostonHousing$rm,BostonHousing$rm<median(BostonHousing$rm))
c2=subset(BostonHousing$rm,BostonHousing$rm>median(BostonHousing$rm))
sm.density.compare(c(c1,c2),g=rep(1:2, each=253),model="equal")
c1=subset(BostonHousing$rm,BostonHousing$rm<median(BostonHousing$rm))
c2=subset(BostonHousing$rm,BostonHousing$rm=>median(BostonHousing$rm))
c2=subset(BostonHousing$rm,BostonHousing$rm>=median(BostonHousing$rm))
c1=subset(BostonHousing$rm,BostonHousing$rm<median(BostonHousing$rm))
c2=subset(BostonHousing$rm,BostonHousing$rm>=median(BostonHousing$rm))
c1=subset(BostonHousing$rm,BostonHousing$rm<median(BostonHousing$rm))
c2=subset(BostonHousing$rm,BostonHousing$rm>median(BostonHousing$rm))
c1=subset(BostonHousing,BostonHousing$rm<median(BostonHousing$rm))
c1=subset(BostonHousing$rm,BostonHousing$rm<median(BostonHousing$rm))
c2=subset(BostonHousing$rm,BostonHousing$rm>median(BostonHousing$rm))
median(BostonHousing$rm)
c1=subset(BostonHousing$rm,BostonHousing$rm<median(BostonHousing$rm))
c2=subset(BostonHousing$rm,BostonHousing$rm>median(BostonHousing$rm))
sm.density.compare(c(c1,c2),g=rep(1:2, each=253),model="equal")
```{r,fig.height=3, fig.width=5, fig.align='center'}
```{r,fig.height=3, fig.width=5, fig.align='center'}
c1=subset(BostonHousing$rm,BostonHousing$rm<median(BostonHousing$rm))
c2=subset(BostonHousing$rm,BostonHousing$rm>median(BostonHousing$rm))
sm.density.compare(c(c1,c2),g=rep(1:2, each=253),model="equal")
#Agrupamos falsos y reales en dos variables
b1 <- as.matrix(billetes)
head(billetes)
#Agrupamos falsos y reales en dos variables
b2 <- as.matrix(BostonHousing$lstat,BostonHousing$rm)
b2
b2
#Agrupamos falsos y reales en dos variables
b2 = cbind(BostonHousing$lstat,BostonHousing$rm)
b2
colnames(b2) = c("lstat","rm")
b2
#Agrupamos falsos y reales en dos variables
b2 = cbind(BostonHousing$lstat,BostonHousing$rm)
colnames(b2) = c("lstat","rm")
# Ahora usamos la función bkde2D()
# El primer argumento es una matriz con dos columnas donde se ubican los datos
# Se considera el kernel bivariante Gaussiano reescalado por las dos ventanas
# que se introducen en el argumento "bandwidth" (usemos el plug-in directo SJ)
h1 <- dpik(b2[,1])
h2 <- dpik(b2[,2])
library(KernSmooth)
library(KernSmooth)
#Agrupamos falsos y reales en dos variables
b2 = cbind(BostonHousing$lstat,BostonHousing$rm)
colnames(b2) = c("lstat","rm")
# Ahora usamos la función bkde2D()
# El primer argumento es una matriz con dos columnas donde se ubican los datos
# Se considera el kernel bivariante Gaussiano reescalado por las dos ventanas
# que se introducen en el argumento "bandwidth" (usemos el plug-in directo SJ)
h1 <- dpik(b2[,1])
h2 <- dpik(b2[,2])
est <- bkde2D(b2, bandwidth = c(h1,h2))
# Gráfico de contorno de la densidad bivariante estimada:
contour(x = est$x1, y = est$x2, z = est$fhat,
xlab = "Ancho margen inferior", ylab = "Longitud diagonal",
cex.lab=1.2)
# Densidad estimada:
persp(x = est$x1, y = est$x2, z = est$fhat,
xlab = "Ancho margen inferior", ylab = "Longitud diagonal",zlab="Densidad",
cex.lab=1.2, theta = -35, axes = TRUE, box = TRUE)
#Agrupamos falsos y reales en dos variables
b2 = cbind(BostonHousing$lstat,BostonHousing$rm)
colnames(b2) = c("lstat","rm")
# Ahora usamos la función bkde2D()
# El primer argumento es una matriz con dos columnas donde se ubican los datos
# Se considera el kernel bivariante Gaussiano reescalado por las dos ventanas
# que se introducen en el argumento "bandwidth" (usemos el plug-in directo SJ)
h1 <- dpik(b2[,1])
h2 <- dpik(b2[,2])
est <- bkde2D(b2, bandwidth = c(h1,h2))
# Gráfico de contorno de la densidad bivariante estimada:
contour(x = est$x1, y = est$x2, z = est$fhat,
xlab = "Ancho margen inferior", ylab = "Longitud diagonal",
cex.lab=1.2)
# Densidad estimada:
persp(x = est$x1, y = est$x2, z = est$fhat,
xlab = "Ancho margen inferior", ylab = "Longitud diagonal",zlab="Densidad",
cex.lab=.5, theta = -35, axes = TRUE, box = TRUE)
# Librer?as:
library(graphics)
# Espec?ficas estimaci?n no param?trica
library(locfit)
library(sm)
library(KernSmooth)
library(splines)
library(SemiPar)
library(lokern)
library(locfit)
ml = BostonHousing$rm
ml
s
lstat = BostonHousing$lstat
#ajuste polinomico de orden 2
# ajuste nadaraya-Watson
# Ajuste Gasser-Muller
# local lineal
lm(lstat~rm)
rm = BostonHousing$rm
lstat = BostonHousing$lstat
#ajuste polinomico de orden 2
# ajuste nadaraya-Watson
# Ajuste Gasser-Muller
# local lineal
lm(lstat~rm)
# local cúbico
m2 <- lm(lstat ~ rm +  I(rm^2))
m2
# local cúbico
m2 <- lm(lstat ~ rm +  I(rm^3))
#ajuste polinomico de orden 2
m2b <- lm(lstat ~ rm, degree = 2, raw=TRUE))
#ajuste polinomico de orden 2
m2b <- lm(lstat ~ rm, degree = 2, raw=TRUE)
m2b
#ajuste polinomico de orden 2
m2b <- lm(lstat ~ rm, degree = 2, raw=TRUE)
#ajuste polinomico de orden 2
m2b <- lm(lstat ~ poly(rm, degree = 2, raw=TRUE))
# ajuste nadaraya-Watson
NW.h20 <- ksmooth(x=rm, y=lstat, kernel="normal", bandwidth=20)
lines(ej2$NIC, m1$fitted.values, col = "blue", lwd = 2, lty = 1)
rm = BostonHousing$rm
lstat = BostonHousing$lstat
#ajuste polinomico de orden 2
m2b <- lm(lstat ~ poly(rm, degree = 2, raw=TRUE))
# ajuste nadaraya-Watson
NW.h20 <- ksmooth(x=rm, y=lstat, kernel="normal", bandwidth=20)
# Ajuste Gasser-Muller
out<-glkerns(b~a,is.rand=FALSE,band=0.07)
# Usa Gasser-Muller al poner is.rand=FALSE
# local lineal
m1=lm(lstat~rm)
# local cúbico
m2 <- lm(lstat ~ rm +  I(rm^3))
lines(ej2$NIC, m1$fitted.values, col = "blue", lwd = 2, lty = 1)
lines(rm, m1$fitted.values, col = "blue", lwd = 2, lty = 1)
#ajuste polinomico de orden 2
{m2b <- lm(lstat ~ poly(rm, degree = 2, raw=TRUE))
# ajuste nadaraya-Watson
NW.h20 <- ksmooth(x=rm, y=lstat, kernel="normal", bandwidth=20)
# Ajuste Gasser-Muller
out<-glkerns(b~a,is.rand=FALSE,band=0.07)
# Usa Gasser-Muller al poner is.rand=FALSE
# local lineal
m1=lm(lstat~rm)
# local cúbico
m2 <- lm(lstat ~ rm +  I(rm^3))
lines(rm, m1$fitted.values, col = "blue", lwd = 2, lty = 1)
abline(m1$coeff[1], m1$coeff[2], col = "blue", lwd = 2, lty = 1)
abline(ej2$NIC, m2$fitted.values, col = "orange", lwd = 2, lty = 1)
abline(out,col="blue",lwd=2)}
# Usa Gasser-Muller al poner is.rand=FALSE
# local lineal
m1=lm(lstat~rm)
#library
library(mlbench)
library(moments)
library(nortest)
library(ggplot2)
library(ggplot2)
library(KernSmooth)
library(sm)
library(KernSmooth)
library(locfit)
library(lokern)
rm = BostonHousing$rm
lstat = BostonHousing$lstat
#ajuste polinomico de orden 2
{m2b <- lm(lstat ~ poly(rm, degree = 2, raw=TRUE))
# ajuste nadaraya-Watson
NW.h20 <- ksmooth(x=rm, y=lstat, kernel="normal", bandwidth=20)
# Ajuste Gasser-Muller
out<-glkerns(b~a,is.rand=FALSE,band=0.07)
# Usa Gasser-Muller al poner is.rand=FALSE
# local lineal
m1=lm(lstat~rm)
# local cúbico
m2 <- lm(lstat ~ rm +  I(rm^3))
lines(rm, m1$fitted.values, col = "blue", lwd = 2, lty = 1)
abline(m1$coeff[1], m1$coeff[2], col = "blue", lwd = 2, lty = 1)
abline(rm, m2$fitted.values, col = "orange", lwd = 2, lty = 1)
abline(out,col="blue",lwd=2)}
#ajuste polinomico de orden 2
{m2b <- lm(lstat ~ poly(rm, degree = 2, raw=TRUE))
# ajuste nadaraya-Watson
NW.h20 <- ksmooth(x=rm, y=lstat, kernel="normal", bandwidth=20)
# Ajuste Gasser-Muller
out<-glkerns(lstat~rm,is.rand=FALSE,band=0.07)
# Usa Gasser-Muller al poner is.rand=FALSE
# local lineal
m1=lm(lstat~rm)
# local cúbico
m2 <- lm(lstat ~ rm +  I(rm^3))
lines(rm, m1$fitted.values, col = "blue", lwd = 2, lty = 1)
abline(m1$coeff[1], m1$coeff[2], col = "blue", lwd = 2, lty = 1)
abline(rm, m2$fitted.values, col = "orange", lwd = 2, lty = 1)
abline(out,col="blue",lwd=2)}
#ajuste polinomico de orden 2
{m2b <- lm(lstat ~ poly(rm, degree = 2, raw=TRUE))
# ajuste nadaraya-Watson
NW.h20 <- ksmooth(x=rm, y=lstat, kernel="normal", bandwidth=20)
# Ajuste Gasser-Muller
out<-glkerns(lstat~rm,is.rand=FALSE,band=0.07)
# Usa Gasser-Muller al poner is.rand=FALSE
# local lineal
m1=lm(lstat~rm)
# local cúbico
m2 <- lm(lstat ~ rm +  I(rm^3))
lines(rm, m1$fitted.values, col = "blue", lwd = 2, lty = 1)
lines(m1$coeff[1], m1$coeff[2], col = "blue", lwd = 2, lty = 1)
lines(rm, m2$fitted.values, col = "orange", lwd = 2, lty = 1)
lines(out,col="blue",lwd=2)}
#ajuste polinomico de orden 2
m2b <- lm(lstat ~ poly(rm, degree = 2, raw=TRUE))
# ajuste nadaraya-Watson
NW.h20 <- ksmooth(x=rm, y=lstat, kernel="normal", bandwidth=20)
# Ajuste Gasser-Muller
out<-glkerns(lstat~rm,is.rand=FALSE,band=0.07)
# Usa Gasser-Muller al poner is.rand=FALSE
# local lineal
m1=lm(lstat~rm)
# local cúbico
m2 <- lm(lstat ~ rm +  I(rm^3))
lines(rm, m1$fitted.values, col = "blue", lwd = 2, lty = 1)
lines(rm, m1$fitted.values, col = "blue", lwd = 2, lty = 1)
lines(ej2$NIC, m1$fitted.values, col = "blue", lwd = 2, lty = 1)
lines(rm, m1$fitted.values, col = "blue", lwd = 2, lty = 1)
lines(rm, m1$fitted.values, col = "blue", lwd = 2, lty = 1)
abline(rm, m1$fitted.values, col = "blue", lwd = 2, lty = 1)
abline(rm, m1$fitted.values, col = "blue", lwd = 2, lty = 1)
rm = BostonHousing$rm
lstat = BostonHousing$lstat
#ajuste polinomico de orden 2
m2b <- lm(lstat ~ poly(rm, degree = 2, raw=TRUE))
# ajuste nadaraya-Watson
NW.h20 <- ksmooth(x=rm, y=lstat, kernel="normal", bandwidth=20)
# Ajuste Gasser-Muller
out<-glkerns(lstat~rm,is.rand=FALSE,band=0.07)
# Usa Gasser-Muller al poner is.rand=FALSE
# local lineal
m1=lm(lstat~rm)
# local cúbico
m2 <- lm(lstat ~ rm +  I(rm^3))
lines(rm, m1$fitted.values, col = "blue", lwd = 2, lty = 1)
lines(m1$coeff[1], m1$coeff[2], col = "blue", lwd = 2, lty = 1)
lines(rm, m2$fitted.values, col = "orange", lwd = 2, lty = 1)
lines(out,col="blue",lwd=2)
lines(NW.h20, lwd=2, col="magenta")
lines(NW.h20, lwd=2, col="magenta")
lines(out,col="blue",lwd=2)
{lines(rm, m1$fitted.values, col = "blue", lwd = 2, lty = 1)
lines(m1$coeff[1], m1$coeff[2], col = "blue", lwd = 2, lty = 1)
lines(rm, m2$fitted.values, col = "orange", lwd = 2, lty = 1)
lines(NW.h20, lwd=2, col="magenta")
lines(out,col="blue",lwd=2)}
summary(m2b)
summary(NW.h20)
summary(m2b)
summary(NW.h20)
dev.off()
lines(rm, m1$fitted.values, col = "blue", lwd = 2, lty = 1)
lines(m1$coeff[1], m1$coeff[2], col = "blue", lwd = 2, lty = 1)
lines(rm, m2$fitted.values, col = "orange", lwd = 2, lty = 1)
lines(NW.h20, lwd=2, col="magenta")
lines(out,col="blue",lwd=2)
x11()
lines(rm, m1$fitted.values, col = "blue", lwd = 2, lty = 1)
lines(m1$coeff[1], m1$coeff[2], col = "blue", lwd = 2, lty = 1)
lines(rm, m2$fitted.values, col = "orange", lwd = 2, lty = 1)
lines(NW.h20, lwd=2, col="magenta")
plot(ej2,col="lightblue",pch=20,main="", xlab="Ingresos netos",
ylab="Gasto en alimentaci?n",cex.lab=1.1)
lines(rm, m1$fitted.values, col = "blue", lwd = 2, lty = 1)
plot(rm,col="lightblue",pch=20,main="", xlab="Ingresos netos",
ylab="Gasto en alimentaci?n",cex.lab=1.1)
lines(rm, m1$fitted.values, col = "blue", lwd = 2, lty = 1)
lines(m1$coeff[1], m1$coeff[2], col = "blue", lwd = 2, lty = 1)
lines(rm, m2$fitted.values, col = "orange", lwd = 2, lty = 1)
lines(NW.h20, lwd=2, col="magenta")
lines(out,col="blue",lwd=2)
{plot(rm,col="lightblue",pch=20,main="", xlab="Ingresos netos",
ylab="Gasto en alimentaci?n",cex.lab=1.1)
lines(rm, m1$fitted.values, col = "blue", lwd = 2, lty = 1)
lines(m1$coeff[1], m1$coeff[2], col = "blue", lwd = 2, lty = 1)
lines(rm, m2$fitted.values, col = "orange", lwd = 2, lty = 1)
lines(NW.h20, lwd=2, col="magenta")
lines(out,col="blue",lwd=2)}
{plot(lstat,col="lightblue",pch=20,main="", xlab="Ingresos netos",
ylab="Gasto en alimentaci?n",cex.lab=1.1)
lines(rm, m1$fitted.values, col = "blue", lwd = 2, lty = 1)
lines(m1$coeff[1], m1$coeff[2], col = "blue", lwd = 2, lty = 1)
lines(rm, m2$fitted.values, col = "orange", lwd = 2, lty = 1)
lines(NW.h20, lwd=2, col="magenta")
lines(out,col="blue",lwd=2)}
{plot(lstat,ms)
lines(rm, m1$fitted.values, col = "blue", lwd = 2, lty = 1)
lines(m1$coeff[1], m1$coeff[2], col = "blue", lwd = 2, lty = 1)
lines(rm, m2$fitted.values, col = "orange", lwd = 2, lty = 1)
lines(NW.h20, lwd=2, col="magenta")
lines(out,col="blue",lwd=2)}
{plot(lstat,rs)
lines(rm, m1$fitted.values, col = "blue", lwd = 2, lty = 1)
lines(m1$coeff[1], m1$coeff[2], col = "blue", lwd = 2, lty = 1)
lines(rm, m2$fitted.values, col = "orange", lwd = 2, lty = 1)
lines(NW.h20, lwd=2, col="magenta")
lines(out,col="blue",lwd=2)}
{plot(lstat,rm)
lines(rm, m1$fitted.values, col = "blue", lwd = 2, lty = 1)
lines(m1$coeff[1], m1$coeff[2], col = "blue", lwd = 2, lty = 1)
lines(rm, m2$fitted.values, col = "orange", lwd = 2, lty = 1)
lines(NW.h20, lwd=2, col="magenta")
lines(out,col="blue",lwd=2)}
{plot(rm,lstat)
lines(rm, m1$fitted.values, col = "blue", lwd = 2, lty = 1)
lines(m1$coeff[1], m1$coeff[2], col = "blue", lwd = 2, lty = 1)
lines(rm, m2$fitted.values, col = "orange", lwd = 2, lty = 1)
lines(NW.h20, lwd=2, col="magenta")
lines(out,col="blue",lwd=2)}
{plot(rm,lstat,pch=21)
lines(rm, m1$fitted.values, col = "blue", lwd = 2, lty = 1)
lines(m1$coeff[1], m1$coeff[2], col = "blue", lwd = 2, lty = 1)
lines(rm, m2$fitted.values, col = "orange", lwd = 2, lty = 1)
lines(NW.h20, lwd=2, col="magenta")
lines(out,col="blue",lwd=2)}
{plot(rm,lstat,pch=21,cex=1)
lines(rm, m1$fitted.values, col = "blue", lwd = 2, lty = 1)
lines(m1$coeff[1], m1$coeff[2], col = "blue", lwd = 2, lty = 1)
lines(rm, m2$fitted.values, col = "orange", lwd = 2, lty = 1)
lines(NW.h20, lwd=2, col="magenta")
lines(out,col="blue",lwd=2)}
{plot(rm,lstat,pch=20,cex=1)
lines(rm, m1$fitted.values, col = "blue", lwd = 2, lty = 1)
lines(m1$coeff[1], m1$coeff[2], col = "blue", lwd = 2, lty = 1)
lines(rm, m2$fitted.values, col = "orange", lwd = 2, lty = 1)
lines(NW.h20, lwd=2, col="magenta")
lines(out,col="blue",lwd=2)}
{plot(rm,lstat,pch=20,cex=1)
lines(rm, m1$fitted.values, col = "blue", lwd = 2, lty = 1)
lines(m1$coeff[1], m1$coeff[2], col = "red", lwd = 2, lty = 1)
lines(rm, m2$fitted.values, col = "orange", lwd = 2, lty = 1)
lines(NW.h20, lwd=2, col="magenta")
lines(out,col="blue",lwd=2)}
{plot(rm,lstat,pch=20,cex=1)
lines(rm, m1$fitted.values, col = "blue", lwd = 2, lty = 1)
lines(m1$coeff[1], m1$coeff[2], col = "red", lwd = 2, lty = 1)
lines(rm, m2$fitted.values, col = "orange", lwd = 2, lty = 1)
lines(NW.h20, lwd=2, col="magenta")
lines(out,col="blue",lwd=2)}
{plot(rm,lstat,pch=20,cex=1)
lines(rm, m1$fitted.values, col = "blue", lwd = 2, lty = 1)
lines(rm, m2$fitted.values, col = "orange", lwd = 2, lty = 1)
lines(NW.h20, lwd=2, col="magenta")
lines(out,col="blue",lwd=2)}
{plot(rm,lstat,pch=20,cex=.5)
lines(rm, m1$fitted.values, col = "blue", lwd = 2, lty = 1)
lines(rm, m2$fitted.values, col = "orange", lwd = 2, lty = 1)
lines(NW.h20, lwd=2, col="magenta")
lines(out,col="blue",lwd=2)}
{plot(rm,lstat,pch=20,cex=.2)
lines(rm, m1$fitted.values, col = "blue", lwd = 2, lty = 1)
lines(rm, m2$fitted.values, col = "orange", lwd = 2, lty = 1)
lines(NW.h20, lwd=2, col="magenta")
lines(out,col="blue",lwd=2)}
rm = BostonHousing$rm
lstat = BostonHousing$lstat
#ajuste polinomico de orden 2
m2b <- lm(lstat ~ poly(rm, degree = 2, raw=TRUE))
# ajuste nadaraya-Watson
NW.h20 <- ksmooth(x=rm, y=lstat, kernel="normal", bandwidth=20)
# Ajuste Gasser-Muller
out<-glkerns(lstat~rm,is.rand=FALSE,band=0.07)
# Usa Gasser-Muller al poner is.rand=FALSE
# local lineal
m1=lm(lstat~rm)
# local cúbico
m2 <- lm(lstat ~ rm +  I(rm^3))
{plot(rm,lstat,pch=20,cex=.2)
lines(rm, m1$fitted.values, col = "blue", lwd = 2, lty = 1)
lines(rm, m2$fitted.values, col = "orange", lwd = 2, lty = 1)
lines(NW.h20, lwd=2, col="magenta")
lines(out,col="blue",lwd=2)}
{plot(rm,lstat,pch=20,cex=.2)
lines(rm, m1$fitted.values, col = "blue", lwd = 2, lty = 1)
lines(rm, m2$fitted.values, col = "orange", lwd = 2, lty = 1)
lines(out,col="blue",lwd=2)}
#ajuste polinomico de orden 2
m2b <- lm(lstat ~ poly(rm, degree = 2, raw=TRUE))
# ajuste nadaraya-Watson
NW.h20 <- ksmooth(x=rm, y=lstat, kernel="normal", bandwidth=20)
# Ajuste Gasser-Muller
out<-glkerns(lstat~rm,is.rand=FALSE,band=0.07)
# Usa Gasser-Muller al poner is.rand=FALSE
# local lineal
m1=lm(lstat~rm)
# local cúbico
m2 <- lm(lstat ~ rm +  I(rm^3))
{plot(rm,lstat,pch=20,cex=.2)
lines(rm, m1$fitted.values, col = "blue", lwd = 2, lty = 1)
lines(rm, m2$fitted.values, col = "orange", lwd = 2, lty = 1)
lines(NW.h20, lwd=2, col="magenta")
lines(out,col="blue",lwd=2)}
# Ajuste Gasser-Muller
out<-glkerns(lstat~rm)
{plot(rm,lstat,pch=20,cex=.2)
lines(rm, m1$fitted.values, col = "blue", lwd = 2, lty = 1)
lines(rm, m2$fitted.values, col = "orange", lwd = 2, lty = 1)
lines(NW.h20, lwd=2, col="magenta")
lines(out,col="blue",lwd=2)}
