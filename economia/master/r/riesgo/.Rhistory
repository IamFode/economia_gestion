confidence_level <- 0.95
percentile_index <- floor((1 - confidence_level) * hist_window)
# Calcular el VaR y ES utilizando el percentil seleccionado
bbva_var <- -tail(bbva_sorted_returns, percentile_index)[1] * sqrt(10)
itx_var <- -tail(itx_sorted_returns, percentile_index)[1] * sqrt(10)
bbva_es <- -mean(tail(bbva_sorted_returns, percentile_index)) * sqrt(10)
itx_es <- -mean(tail(itx_sorted_returns, percentile_index)) * sqrt(10)
# Mostrar resultados
list(cat("BBVA VaR (95%):", bbva_var, "\n"),
cat("BBVA ES (95%):", bbva_es, "\n\n"),
cat("Inditex VaR (95%):", itx_var, "\n"),
cat("Inditex ES (95%):", itx_es, "\n"))
# Mostrar resultados
list(cat("BBVA VaR (95%):", bbva_var, "\n"),
cat("BBVA ES (95%):", bbva_es, "\n\n"),
cat("Inditex VaR (95%):", itx_var, "\n"),
cat("Inditex ES (95%):", itx_es, "\n"))
# Mostrar resultados
cat("BBVA VaR (95%):", bbva_var, "\n")
cat("BBVA ES (95%):", bbva_es, "\n\n")
cat("Inditex VaR (95%):", itx_var, "\n")
cat("Inditex ES (95%):", itx_es, "\n")
# Mostrar resultados
cat("BBVA VaR:", bbva_var, "\n")
cat("BBVA ES:", bbva_es, "\n\n")
cat("Inditex VaR: ", itx_var, "\n")
cat("Inditex ES: ", itx_es, "\n")
# Función para calcular VaR y ES por simulación de Monte Carlo
# Utiliza 10,000 simulaciones y una distribución empírica de rendimientos históricos
monte_carlo_var_es <- function(symbols, H = 10, alpha = 0.95, num_sims = 10000) {
prices <- lapply(symbols, function(sym) {
getSymbols(sym, auto.assign = FALSE)
})
prices <- do.call(merge, prices)
returns <- na.omit(ROC(prices, na.pad = FALSE))
var_es <- data.frame()
for (sym in symbols) {
sim_returns <- replicate(num_sims, {
hist_returns <- sample(returns[, sym], H, replace = TRUE)
prod(1 + hist_returns) - 1
})
sim_returns <- sort(sim_returns)
var_es[sym, "VaR"] <- -sim_returns[ceiling(num_sims * (1 - alpha))]
var_es[sym, "ES"] <- -mean(sim_returns[1:ceiling(num_sims * (1 - alpha))])
}
return(var_es)
}
# Ejemplo de uso
symbols <- c("BBVA", "ITX")
var_es_mc <- monte_carlo_var_es(symbols, H = 10, alpha = 0.95, num_sims = 10000)
# Definir los símbolos de los activos
symbols <- c("BBVA", "ITX")
# Descargar los datos de precios diarios
getSymbols(symbols, from = Sys.Date() - 365, to = Sys.Date())
# Calcular los retornos diarios
returns <- do.call(cbind, lapply(symbols, function(sym) {
Return.calculate(Cl(get(sym)))
}))
# Calcular el rendimiento promedio y la matriz de covarianza
mu <- apply(returns, 2, mean)
# Calcular los retornos diarios
returns <- do.call(cbind, lapply(symbols, function(sym) {
Return.calculate(Cl(get(sym)))
}))
# Definir los símbolos de los activos
symbols <- c("BBVA", "ITX")
# Descargar los datos de precios diarios
getSymbols(symbols, from = Sys.Date() - 365, to = Sys.Date())
# Definir los símbolos de los activos
symbols <- c("BBVA.MC", "ITX.MC")
# Descargar los datos de precios diarios
getSymbols(symbols, from = Sys.Date() - 365, to = Sys.Date())
# Calcular los retornos diarios
returns <- do.call(cbind, lapply(symbols, function(sym) {
Return.calculate(Cl(get(sym)))
}))
library(quantmod)
# Calcular los retornos diarios
returns <- do.call(cbind, lapply(symbols, function(sym) {
Return.calculate(Cl(get(sym)))
}))
library(TTR)
# Definir los activos
activos <- c("BBVA", "ITX")
# Descargar los precios de cierre ajustados de los activos
getSymbols(activos, from = Sys.Date() - 365, to = Sys.Date())
# Definir los activos
activos <- c("BBVA.MC", "ITX.MC")
# Descargar los precios de cierre ajustados de los activos
getSymbols(activos, from = Sys.Date() - 365, to = Sys.Date())
# Calcular los retornos diarios
returns <- do.call(cbind, lapply(activos, function(sym) ROC(Cl(get(sym)))))
# Calcular la media y la desviación estándar de los retornos diarios
mu <- apply(returns, 2, mean)
sigma <- apply(returns, 2, sd)
# Generar simulaciones de los retornos diarios
set.seed(123)
sim_returns <- matrix(rnorm(2*10000, mean = mu, sd = sigma), ncol = 2)
sim_returns <- matrix(rnorm(2*10000, mean = mu, sd = sigma), ncol = 2)
sim_returns <- matrix(rnorm(2*1000, mean = mu, sd = sigma), ncol = 2)
# Calcular la media y la desviación estándar de los retornos diarios
mu <- apply(returns, 2, mean)
sigma <- apply(returns, 2, sd)
# Generar simulaciones de los retornos diarios
set.seed(123)
sim_returns <- matrix(rnorm(2*10000, mean = mu, sd = sigma), ncol = 2)
# Calcular el retorno acumulado para cada simulación
horizon <- 10
sim_returns_acum <- apply(sim_returns, 2, function(x) prod(1 + x)^(horizon/365) - 1)
# Definir el valor de la posición inicial para cada activo
pos <- c(10000, 5000)
# Calcular el valor de cada posición para cada simulación
sim_pos_values <- sweep(sim_returns_acum, 2, pos, "*")
getSymbols(c("BBVA.MC", "ITX.MC"), from = Sys.Date()-365, to = Sys.Date())
# Paso 2: Calcular los rendimientos diarios de los activos a partir de los precios de cierre.
returns_bbva <- diff(log(Cl(BBVA.MC)))
returns_itx <- diff(log(Cl(ITX.MC)))
# Paso 3: Calcular la media y la desviación estándar de los rendimientos diarios.
mu_bbva <- mean(returns_bbva)
sigma_bbva <- sd(returns_bbva)
mu_itx <- mean(returns_itx)
sigma_itx <- sd(returns_itx)
# Paso 4: Generar simulaciones de Monte Carlo para los rendimientos diarios durante el horizonte inversor de 10 días.
horizon <- 10
simulations <- 10000
simulated_returns_bbva <- matrix(nrow = simulations, ncol = horizon)
simulated_returns_itx <- matrix(nrow = simulations, ncol = horizon)
for(i in 1:simulations){
simulated_returns_bbva[i,] <- rnorm(horizon, mu_bbva, sigma_bbva)
simulated_returns_itx[i,] <- rnorm(horizon, mu_itx, sigma_itx)
}
warning()
for(i in 1:simulations){
simulated_returns_bbva[i,] <- rnorm(horizon, mu_bbva, sigma_bbva)
simulated_returns_itx[i,] <- rnorm(horizon, mu_itx, sigma_itx)
}
warning()
for(i in 1:simulations){
simulated_returns_bbva[i,] <- rnorm(horizon, mu_bbva, sigma_bbva)
simulated_returns_itx[i,] <- rnorm(horizon, mu_itx, sigma_itx)
warning()
}
warning()
for(i in 1:simulations){
simulated_returns_bbva[i,] <- rnorm(horizon, mu_bbva, sigma_bbva)
simulated_returns_itx[i,] <- rnorm(horizon, mu_itx, sigma_itx)
}
simulated_returns_bbva <- matrix(nrow = simulations, ncol = horizon)
simulated_returns_itx <- matrix(nrow = simulations, ncol = horizon)
print(simulated_returns_bbva)
# Paso 2: Calcular los rendimientos diarios de los activos a partir de los precios de cierre.
returns_bbva <- diff(log(Cl(BBVA.MC)))
returns_itx <- diff(log(Cl(ITX.MC)))
print(returns_bbva)
# Paso 3: Calcular la media y la desviación estándar de los rendimientos diarios.
mu_bbva <- mean(returns_bbva)
sigma_bbva <- sd(returns_bbva)
mu_itx <- mean(returns_itx)
sigma_itx <- sd(returns_itx)
# Paso 4: Generar simulaciones de Monte Carlo para los rendimientos diarios durante el horizonte inversor de 10 días.
horizon <- 10
simulations <- 10000
# Cargar paquetes necesarios
library(tidyverse)
install.packages("tidyverse")
# Cargar paquetes necesarios
library(tidyverse)
# Definir activos
activos <- c("BBVA.MC", "ITX.MC")
# Descargar datos históricos
datos <- getSymbols(activos, from = Sys.Date() - 365, to = Sys.Date(), auto.assign = FALSE)
# Seleccionar precios de cierre ajustados
precios <- datos %>% select(Symbol, Adjusted)
# Cargar paquetes necesarios
library(tidyverse)
# Definir activos
activos <- c("BBVA.MC", "ITX.MC")
# Descargar datos históricos
datos <- getSymbols(activos, from = Sys.Date() - 365, to = Sys.Date(), auto.assign = FALSE)
library(tidyverse)
# Descargar datos históricos de BBVA e Inditex
getSymbols(c("BBVA.MC", "ITX.MC"), from = Sys.Date()-252, to = Sys.Date(), auto.assign = TRUE)
# Seleccionar los precios ajustados de cierre
bbva <- BBVA.MC[,6]
itx <- ITX.MC[,6]
# Calcular los rendimientos logarítmicos diarios
returns_bbva <- diff(log(bbva))
returns_itx <- diff(log(itx))
# Calcular la media y la desviación estándar de los rendimientos
mu_bbva <- mean(returns_bbva)
mu_itx <- mean(returns_itx)
sigma_bbva <- sd(returns_bbva)
sigma_itx <- sd(returns_itx)
# Definir el horizonte de inversión
horizon <- 10
# Definir el nivel de confianza
conf_level <- 0.95
# Definir el número de simulaciones
simulations <- 10000
# Simular trayectorias de precios para BBVA e Inditex
simulated_prices_bbva <- matrix(0, nrow = simulations, ncol = horizon)
simulated_prices_itx <- matrix(0, nrow = simulations, ncol = horizon)
for (i in 1:simulations) {
simulated_returns_bbva <- rnorm(horizon, mu_bbva, sigma_bbva/sqrt(252))
simulated_returns_itx <- rnorm(horizon, mu_itx, sigma_itx/sqrt(252))
simulated_prices_bbva[i,] <- bbva[length(bbva)]*exp(cumsum(simulated_returns_bbva))
simulated_prices_itx[i,] <- itx[length(itx)]*exp(cumsum(simulated_returns_itx))
}
# Descargar los datos de Yahoo Finance
bbva <- getSymbols("BBVA", auto.assign = FALSE)
# Descargar los datos de Yahoo Finance
bbva <- getSymbols("BBVA.MC", auto.assign = FALSE)
itx <- getSymbols("ITX.MC", auto.assign = FALSE)
# Seleccionar solo los precios de cierre
bbva_price <- as.numeric(bbva[, "BBVA.Close"])
# Descargar los datos de Yahoo Finance
bbva <- getSymbols("BBVA.MC", auto.assign = FALSE)
# librerias
source("funciones.R")
# librerias
source("funciones.R")
# DATA
# ibex 35
ibex35 = read.csv("./data/BBVA.csv")
# santander
santander = read.csv("./data/ITX.csv")
View(ibex35)
# librerias
source("funciones.R")
# DATA
# ibex 35
bbva = read.csv("./data/BBVA.csv")
# santander
itx = read.csv("./data/ITX.csv")
#cartera
cartera = merge(bbva[,c(1,2)],itx[,c(1,2)],by="Fecha")
# DATA
# ibex 35
bbva = read.csv("./data/BBVA.csv")
# santander
itx = read.csv("./data/ITX.csv")
#cartera
cartera = merge(bbva[,c(1,2)],itx[,c(1,2)],by="Fecha")
View(bbva)
#cartera
cartera = merge(bbva[,c(1,2)],itx[,c(1,2)],by="Date")
colnames(cartera)= c("fecha","bbva","itx")
cartera = limpiar(cartera)
rm(bbva)
rm(itx)
cartera = cartera[order(cartera$fecha, decreasing = FALSE),]
cartera
# DATA
# ibex 35
bbva = read.csv("./data/BBVA.csv")
# santander
itx = read.csv("./data/ITX.csv")
#cartera
cartera = merge(bbva[,c(1,2)],itx[,c(1,2)],by="Date")
colnames(cartera)= c("fecha","bbva","itx")
View(bbva)
View(itx)
cartera = limpiar(cartera)
cartera = cartera[order(cartera$fecha, decreasing = FALSE),]
cartera
# DATA
# ibex 35
bbva = read.csv("./data/BBVA.csv")
# santander
itx = read.csv("./data/ITX.csv")
#cartera
cartera = merge(bbva[,c(1,2)],itx[,c(1,2)],by="Date")
colnames(cartera)= c("fecha","bbva","itx")
cartera = limpiar(cartera)
rm(bbva)
rm(itx)
cartera = cartera[order(cartera$fecha, decreasing = FALSE),]
cartera
# librerias
source("funciones.R")
# DATA
# ibex 35
bbva = read.csv("./data/BBVA.csv")
# santander
itx = read.csv("./data/ITX.csv")
#cartera
cartera = merge(bbva[,c(1,2)],itx[,c(1,2)],by="Date")
colnames(cartera)= c("fecha","bbva","itx")
cartera = limpiar(cartera)
cartera
# librerias
source("funciones.R")
# DATA
# ibex 35
bbva = read.csv("./data/BBVA.csv")
# santander
itx = read.csv("./data/ITX.csv")
#cartera
cartera = merge(bbva[,c(1,2)],itx[,c(1,2)],by="Date")
colnames(cartera)= c("fecha","bbva","itx")
cartera = limpiar(cartera)
rm(bbva)
rm(itx)
cartera = cartera[order(cartera$fecha, decreasing = FALSE),]
cartera
# DATA
# ibex 35
bbva = read.csv("./data/BBVA.csv")
# santander
itx = read.csv("./data/ITX.csv")
View(bbva)
# librerias
source("funciones.R")
# DATA
# ibex 35
bbva = read.csv("./data/BBVA.csv")
# santander
itx = read.csv("./data/ITX.csv")
#cartera
cartera = merge(bbva[,c(1,2)],itx[,c(1,2)],by="Date")
#cartera
cartera = merge(bbva[,c(1,2)],itx[,c(1,2)],by="Fecha")
colnames(cartera)= c("fecha","bbva","itx")
cartera = limpiar(cartera)
rm(bbva)
rm(itx)
cartera = cartera[order(cartera$fecha, decreasing = FALSE),]
cartera
# FORMULAS DE LIMPIEZA DE DATOS
limpiar <- function(df) {
df[,1] <- as.Date(df[,1], format = "%d.%m.%Y")
df[,2:ncol(df)] <- lapply(df[,2:ncol(df)], function(x) gsub("\\.", "", x))
df[,2:ncol(df)] <- lapply(df[,2:ncol(df)], function(x) gsub(",", ".", x))
df[,2:ncol(df)] <- lapply(df[,2:ncol(df)], as.numeric)
return(df)
}
# DATA
# ibex 35
ibex35 = read.csv("./data/dataHistIBEX35.csv")
# santander
santander = read.csv("./data/dataHistSANTANDER.csv")
#cartera
cartera = merge(ibex35[,c(1,2)],santander[,c(1,2)],by="Fecha")
colnames(cartera)= c("fecha","ibex","santander")
cartera = limpiar(cartera)
rm(ibex35)
rm(santander)
cartera = cartera[order(cartera$fecha, decreasing = FALSE),]
cartera
cartera = cartera[order(cartera$fecha, decreasing = FALSE),]
row.names(cartera) = cartera[,1]
cartera
df[,1] = NULL
row.names(cartera) = cartera[,1]
df[,1] = NULL
# DATA
# ibex 35
bbva = read.csv("./data/BBVA.csv")
# santander
itx = read.csv("./data/ITX.csv")
#cartera
cartera = merge(bbva[,c(1,2)],itx[,c(1,2)],by="Fecha")
colnames(cartera)= c("fecha","bbva","itx")
cartera = limpiar(cartera)
# santander
itx = read.csv("./data/ITX.csv")
#cartera
cartera = merge(bbva[,c(1,2)],itx[,c(1,2)],by="Fecha")
colnames(cartera)= c("fecha","bbva","itx")
cartera = limpiar(cartera)
# librerias
source("funciones.R")
colnames(cartera)= c("fecha","bbva","itx")
cartera = limpiar(cartera)
rm(bbva)
rm(itx)
cartera = cartera[order(cartera$fecha, decreasing = FALSE),]
row.names(cartera) = cartera[,1]
cartera[,1] = NULL
cartera
################# SIMULACIÓN HISTÓRICA #########################
simHistorica = function(x,prob){
res = diff(x, lag = 1)
last = tail(x,n=1)
Var = c()
for(i in res){
Var = c(Var,last+i)
}
rent = c()
for(i in Var){
rent = c(rent,log(i/last))
}
VaR = unname(quantile(rent,probs=prob,rm.na=FALSE))
ES = sum(rent[rent<=VaR])/length(rent[rent<=VaR])
result = cbind(VaR,ES)
return(result)
}
# librerias
source("funciones.R")
simHistorica(cartera$bbva,0.05)
simHistorica(cartera$itx,0.05)
# librerias
source("funciones.R")
################# SIMULACIÓN HISTÓRICA #########################
simHistorica = function(x,prob,horizonte){
res = diff(x, lag =horizonte)
last = tail(x,n=horizonte)
Var = c()
for(i in res){
Var = c(Var,last+i)
}
rent = c()
for(i in Var){
rent = c(rent,log(i/last))
}
VaR = unname(quantile(rent,probs=prob,rm.na=FALSE))
ES = sum(rent[rent<=VaR])/length(rent[rent<=VaR])
result = cbind(VaR,ES)
return(result)
}
# librerias
source("funciones.R")
# librerias
source("funciones.R")
################# SIMULACIÓN HISTÓRICA #########################
simHistorica = function(x,prob,horizonte){
res = diff(x, lag =horizonte)
last = tail(x,n=horizonte)
Var = c()
for(i in res){
Var = c(Var,last+i)
}
rent = c()
for(i in Var){
rent = c(rent,log(i/last))
}
VaR = unname(quantile(rent,probs=prob,rm.na=FALSE))
ES = sum(rent[rent<=VaR])/length(rent[rent<=VaR])
result = cbind(VaR,ES)
return(result)
}
simHistorica(cartera$bbva,0.05,10)
################# SIMULACIÓN HISTÓRICA #########################
simHistorica = function(x,prob,horizonte){
res = diff(x, lag =horizonte)
last = tail(x,n=horizonte)
Var = c()
for(i in res){
Var = c(Var,last+i)
}
rent = c()
for(i in Var){
rent = c(rent,log(i/last))
}
print(rent)
VaR = unname(quantile(rent,probs=prob,rm.na=FALSE))
ES = sum(rent[rent<=VaR])/length(rent[rent<=VaR])
result = cbind(VaR,ES)
return(result)
}
simHistorica(cartera$bbva,0.05,10)
simHistorica(cartera$bbva,0.05,1)
simHistorica(cartera$bbva,0.05,10)
################# SIMULACIÓN HISTÓRICA #########################
simHistorica = function(x,prob,horizonte){
res = diff(x, lag =horizonte)
print(res)
last = tail(x,n=horizonte)
Var = c()
for(i in res){
Var = c(Var,last+i)
}
rent = c()
for(i in Var){
rent = c(rent,log(i/last))
}
VaR = unname(quantile(rent,probs=prob,rm.na=FALSE))
ES = sum(rent[rent<=VaR])/length(rent[rent<=VaR])
result = cbind(VaR,ES)
return(result)
}
simHistorica(cartera$bbva,0.05,10)
View(cartera)
log(4.682/4.962)
################# SIMULACIÓN HISTÓRICA #########################
simHistorica = function(x,prob,horizonte){
res = diff(x, lag =horizonte)
print(res)
last = tail(x,n=1)
Var = c()
for(i in res){
Var = c(Var,last+i)
}
rent = c()
for(i in Var){
rent = c(rent,log(i/last))
}
VaR = unname(quantile(rent,probs=prob,rm.na=FALSE))
ES = sum(rent[rent<=VaR])/length(rent[rent<=VaR])
result = cbind(VaR,ES)
return(result)
}
simHistorica(cartera$bbva,0.05,10)
log(4.682/4.962)
4.682-4.962
4.682-4.962
4.682-4.962
simHistorica(cartera$bbva,0.05,11)
simHistorica(cartera$bbva,0.05,9)
simHistorica(cartera$bbva,0.05,10)
# librerias
source("funciones.R")
