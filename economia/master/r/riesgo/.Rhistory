simMonteCarloEj2(activos,dias=252/10,prob=0.05,peso=c(.5,.5))
################## Simulación por Monte Carlo ##################
simMonteCarloEj2 = function(x,dias,prob,peso){
rentabilidad = rentabCartera(x,peso)
deanual = sqrt(dias)*sd(rentabilidad)
mediaanual = dias*mean(rentabilidad)
delta = 1/dias
last = tail(rentabilidad,n=1)
set.seed(2000)
aleatorion = rnorm(length(x),0,1)
precio = last+last*(mediaanual*delta+deanual*sqrt(delta)*aleatorion)
rent = log(precio/last)
Var = quantile(rent,prob)
ES = sum(rent[rent<=Var])/length(rent[rent<=Var])
result = cbind(Var,ES)
return(result)
}
simMonteCarloEj2(activos,dias=252/10,prob=0.05,peso=c(.5,.5))
simHistoricaEj2(activos$bbva,activos$itx,quantil = 0.05,n=10,peso=c(.5,.5))
simHistoricaEj2(activos$bbva,activos$itx,quantil = 0.05,n=10,peso=c(.5,.5))
################ RENTABILIDAD DE UNA CARTERA ###################
rentabCartera <- function(vec,peso) {
result <- lapply(seq_along(vec), function(i) rentabActivo(vec[[i]]) * peso[i])
result <- do.call(cbind, result)
rowSums(result)
}
rentabCarteraEj2 <- function(vec,peso,nn) {
result <- lapply(seq_along(vec), function(i) rentabActivoEj2(vec[[i]],nn) * peso[i])
result <- do.call(cbind, result)
rowSums(result)
}
simHistoricaEj2(activos$bbva,activos$itx,quantil = 0.05,n=10,peso=c(.5,.5))
################# SIMULACIÓN HISTÓRICA #########################
simHistoricaEj2 = function(...,quantil,n,peso){
df = data.frame(...)
Var <- list()
for (col in names(df)) {
x <- df[[col]]
res <- diff(x, n)
last <- tail(x, n=1)
var <- c()
for (i in res) {
var <- c(var, last+i)
}
Var[[col]] <- var
}
rent=rentabCartera(Var,peso)
VaR = unname(quantile(rent,probs=quantil,rm.na=FALSE))
ES = sum(rent[rent<=VaR])/length(rent[rent<=VaR])
result = cbind(VaR,ES)
return(result)
}
simHistoricaEj2(cartera$ibex,cartera$santander,quantil = 0.05,n=10,peso=c(.5,.5))
simHistoricaEj2(cartera$ibex,cartera$santander,quantil = 0.05,n=10,peso=c(.5,.5))
################# SIMULACIÓN HISTÓRICA #########################
simHistoricaEj2 = function(...,quantil,n,peso){
df = data.frame(...)
Var <- list()
for (col in names(df)) {
x <- df[[col]]
res <- diff(x, n)
last <- tail(x, n=1)
var <- c()
for (i in res) {
var <- c(var, last+i)
}
Var[[col]] <- var
}
rent=rentabCartera(Var,peso)
VaR = unname(quantile(rent,probs=quantil,rm.na=FALSE))
ES = sum(rent[rent<=VaR])/length(rent[rent<=VaR])
result = cbind(VaR,ES)
return(result)
}
simHistoricaEj2(cartera$ibex,cartera$santander,quantil = 0.05,n=10,peso=c(.5,.5))
simHistoricaEj2(activos$bbva,activos$itx,quantil = 0.05,n=10,peso=c(.5,.5))
simMonteCarloEj2(activos,dias=252/10,prob=0.05,peso=c(.5,.5))
simHistoricaEj2VaR = function(...,quantil,n,peso){
df = data.frame(...)
Var <- list()
for (col in names(df)) {
x <- df[[col]]
res <- diff(x, n)
last <- tail(x, n=1)
var <- c()
for (i in res) {
var <- c(var, last+i)
}
Var[[col]] <- var
}
rent=rentabCartera(Var,peso)
VaR = unname(quantile(rent,probs=quantil,rm.na=FALSE))
ES = sum(rent[rent<=VaR])/length(rent[rent<=VaR])
result = cbind(VaR)
return(result)
}
backtesting(simHistoricaEj2VaR(activos$bbva,0.05,10),
activos$bbva,
0.05)
backtesting(simHistoricaEj2VaR(activos$bbva,0.05,10),
activos$bbva,
0.05)
simHistoricaEj2VaR = function(...,quantil,n,peso){
df = data.frame(...)
Var <- list()
for (col in names(df)) {
x <- df[[col]]
res <- diff(x, n)
last <- tail(x, n=1)
var <- c()
for (i in res) {
var <- c(var, last+i)
}
Var[[col]] <- var
}
rent=rentabCartera(Var,peso)
VaR = unname(quantile(rent,probs=quantil,rm.na=FALSE))
ES = sum(rent[rent<=VaR])/length(rent[rent<=VaR])
result = cbind(VaR)
return(result)
}
simHistoricaEj2VaR(activos$bbva,activos$itx,quantil = 0.05,n=10,c(.5,.5))
simHistoricaEj2VaR(activos$bbva,activos$itx,quantil = 0.05,n=10,peso=c(.5,.5))
simHistoricaEj2VaR(activos$bbva,activos$itx,quantil = 0.05,n=10,peso=c(.5,.5))
backtesting(simHistoricaEj2VaR(activos$bbva,0.05,10),
activos$bbva,
0.05)
simHistoricaEj2VaR = function(...,quantil,n,peso){
df = data.frame(...)
Var <- list()
for (col in names(df)) {
x <- df[[col]]
res <- diff(x, n)
last <- tail(x, n=1)
var <- c()
for (i in res) {
var <- c(var, last+i)
}
Var[[col]] <- var
}
rent=rentabCartera(Var,peso)
VaR = unname(quantile(rent,probs=quantil,rm.na=FALSE))
ES = sum(rent[rent<=VaR])/length(rent[rent<=VaR])
result = cbind(VaR)
return(result)
}
backtesting(simHistoricaEj2VaR(activos$bbva,0.05,10),
activos$bbva,
0.05)
backtesting(simHistoricaEj2VaR(activos$bbva,0.05,10,c(.5,.5)),
activos$bbva,
0.05)
backtesting(simHistoricaEj2VaR(activos$bbva,0.05,10,c(.5,.5)),
activos$bbva,
0.05)
backtesting(simHistoricaEj2VaR(activos$bbva,quantil=0.05,n=10,c(.5,.5)),
activos$bbva,
0.05)
backtesting(simHistoricaEj2VaR(activos$bbva,quantil=0.05,n=10,peso=c(.5,.5)),
activos$bbva,
0.05)
backtesting(simHistoricaEj2VaR(activos$bbva,quantil=0.05,n=10,peso=c(.5,.5)),
activos$bbva,
0.05)
######################### BACKTESTING ##########################
backtestingEj2 = function(func,activo,p){
rentabilidad = rentabActivo(activo)
comparar = rentabilidad<=func
t = length(rentabilidad)
N = sum(comparar==TRUE)
pEstimado = N/t
test = -2*log((1-p)^(t-N)*p^N)+2*log((1-pEstimado)^(t-N)*pEstimado^N)
chidist = pchisq(test,1,lower.tail = FALSE)
if(test>chidist){
cat("p estimado =", pEstimado, "es distinto a p =",p)
} else{
cat("p estimado =", pEstimado, "es igual a p =",p)
}
return(chidist)
}
backtestingEj2(simHistoricaEj2VaR(activos$bbva,quantil=0.05,n=10,peso=c(.5,.5)),
activos$bbva,
0.05)
######################### BACKTESTING ##########################
backtestingEj2 = function(func,activo,p,peso){
rentabilidad = rentabCartera(activo,peso)
comparar = rentabilidad<=func
t = length(rentabilidad)
N = sum(comparar==TRUE)
pEstimado = N/t
test = -2*log((1-p)^(t-N)*p^N)+2*log((1-pEstimado)^(t-N)*pEstimado^N)
chidist = pchisq(test,1,lower.tail = FALSE)
if(test>chidist){
cat("p estimado =", pEstimado, "es distinto a p =",p)
} else{
cat("p estimado =", pEstimado, "es igual a p =",p)
}
return(chidist)
}
backtestingEj2(simHistoricaEj2VaR(activos$bbva,quantil=0.05,n=10,peso=c(.5,.5)),
activos$bbva,
0.05,c=(.5,.5))
backtestingEj2(simHistoricaEj2VaR(activos$bbva,quantil=0.05,n=10,peso=c(.5,.5)),
activos$bbva,
0.05,c=(.5,.5))
######################### BACKTESTING ##########################
backtestingEj2 = function(func,activo,p,peso){
rentabilidad = rentabCartera(activo,peso)
comparar = rentabilidad<=func
t = length(rentabilidad)
N = sum(comparar==TRUE)
pEstimado = N/t
test = -2*log((1-p)^(t-N)*p^N)+2*log((1-pEstimado)^(t-N)*pEstimado^N)
chidist = pchisq(test,1,lower.tail = FALSE)
if(test>chidist){
cat("p estimado =", pEstimado, "es distinto a p =",p)
} else{
cat("p estimado =", pEstimado, "es igual a p =",p)
}
return(chidist)
}
cat("BBVA")
backtestingEj2(simHistoricaEj2VaR(activos$bbva,quantil=0.05,n=10,peso=c(.5,.5)),
activos$bbva,
0.05,c=(0.5,0.5))
backtestingEj2(simHistoricaEj2VaR(activos$bbva,quantil=0.05,n=10,peso=c(.5,.5)),
activos$bbva,
0.05,c=c(.5,.5))
backtestingEj2(simHistoricaEj2VaR(activos$bbva,quantil=0.05,n=10,peso=c(.5,.5)),
activos$bbva,
0.05,peso=c(.5,.5))
backtestingEj2(simHistoricaEj2VaR(activos$bbva,quantil=0.05,n=10,peso=c(.5,.5)),
activos$bbva,
quantil=0.05,peso=c(.5,.5))
backtestingEj2(simHistoricaEj2VaR(activos$bbva,quantil=0.05,n=10,peso=c(.5,.5)),
activos$bbva,
p=0.05,peso=c(.5,.5))
backtestingEj2(simHistoricaEj2VaR(activos$bbva,quantil=0.05,n=10,peso=c(.5,.5)),activos$bbva,p=0.05,peso=c(.5,.5))
backtestingEj2(simHistoricaEj2VaR(activos$bbva,quantil=0.05,n=10,peso=c(.5,.5)),activos$bbva,p=0.05,peso=c(.5,.5))
######################### BACKTESTING ##########################
backtestingEj2 = function(func,activo,p,peso){
rentabilidad = rentabCartera(activo,peso)
print(head(rentabilidad,5))
comparar = rentabilidad<=func
t = length(rentabilidad)
N = sum(comparar==TRUE)
pEstimado = N/t
test = -2*log((1-p)^(t-N)*p^N)+2*log((1-pEstimado)^(t-N)*pEstimado^N)
chidist = pchisq(test,1,lower.tail = FALSE)
if(test>chidist){
cat("p estimado =", pEstimado, "es distinto a p =",p)
} else{
cat("p estimado =", pEstimado, "es igual a p =",p)
}
return(chidist)
}
backtestingEj2(simHistoricaEj2VaR(activos$bbva,quantil=0.05,n=10,peso=c(.5,.5)),activos$bbva,p=0.05,peso=c(.5,.5))
backtestingEj2(simHistoricaEj2VaR(activos,quantil=0.05,n=10,peso=c(.5,.5)),activos$bbva,p=0.05,peso=c(.5,.5))
backtestingEj2(simHistoricaEj2VaR(activos,quantil=0.05,n=10,peso=c(.5,.5)),activos$bbva,p=0.05,peso=c(.5,.5))
backtestingEj2(simHistoricaEj2VaR(activos$bbva,activos$itx,quantil=0.05,n=10,peso=c(.5,.5)),activoss,p=0.05,peso=c(.5,.5))
backtestingEj2(simHistoricaEj2VaR(activos$bbva,activos$itx,quantil=0.05,n=10,peso=c(.5,.5)),activos,p=0.05,peso=c(.5,.5))
backtestingEj2(simHistoricaEj2VaR(activos$bbva,activos$itx,quantil=0.05,n=10,peso=c(.5,.5)),activos,p=0.05,peso=c(.5,.5))
######################### BACKTESTING ##########################
backtestingEj2 = function(func,activo,p,peso){
rentabilidad = as.matrix(rentabCartera(activo,peso))
print(head(rentabilidad,5))
comparar = rentabilidad<=func
t = length(rentabilidad)
N = sum(comparar==TRUE)
pEstimado = N/t
test = -2*log((1-p)^(t-N)*p^N)+2*log((1-pEstimado)^(t-N)*pEstimado^N)
chidist = pchisq(test,1,lower.tail = FALSE)
if(test>chidist){
cat("p estimado =", pEstimado, "es distinto a p =",p)
} else{
cat("p estimado =", pEstimado, "es igual a p =",p)
}
return(chidist)
}
backtestingEj2(simHistoricaEj2VaR(activos$bbva,activos$itx,quantil=0.05,n=10,peso=c(.5,.5)),activos,p=0.05,peso=c(.5,.5))
print(rentabilidad,5)
######################### BACKTESTING ##########################
backtestingEj2 = function(func,activo,p,peso){
rentabilidad = as.matrix(rentabCartera(activo,peso))
print(rentabilidad,5)
comparar = rentabilidad<=func
t = length(rentabilidad)
N = sum(comparar==TRUE)
pEstimado = N/t
test = -2*log((1-p)^(t-N)*p^N)+2*log((1-pEstimado)^(t-N)*pEstimado^N)
chidist = pchisq(test,1,lower.tail = FALSE)
if(test>chidist){
cat("p estimado =", pEstimado, "es distinto a p =",p)
} else{
cat("p estimado =", pEstimado, "es igual a p =",p)
}
return(chidist)
}
backtestingEj2(simHistoricaEj2VaR(activos$bbva,activos$itx,quantil=0.05,n=10,peso=c(.5,.5)),activos,p=0.05,peso=c(.5,.5))
######################### BACKTESTING ##########################
backtestingEj2 = function(func,activo,p,peso){
rentabilidad = as.matrix(rentabCartera(activo,peso))
print(func)
comparar = rentabilidad<=func
t = length(rentabilidad)
N = sum(comparar==TRUE)
pEstimado = N/t
test = -2*log((1-p)^(t-N)*p^N)+2*log((1-pEstimado)^(t-N)*pEstimado^N)
chidist = pchisq(test,1,lower.tail = FALSE)
if(test>chidist){
cat("p estimado =", pEstimado, "es distinto a p =",p)
} else{
cat("p estimado =", pEstimado, "es igual a p =",p)
}
return(chidist)
}
backtestingEj2(simHistoricaEj2VaR(activos$bbva,activos$itx,quantil=0.05,n=10,peso=c(.5,.5)),activos,p=0.05,peso=c(.5,.5))
######################### BACKTESTING ##########################
backtestingEj2 = function(func,activo,p,peso){
rentabilidad = as.matrix(rentabCartera(activo,peso))
comparar = rentabilidad<=func
print(comparar)
t = length(rentabilidad)
N = sum(comparar==TRUE)
pEstimado = N/t
test = -2*log((1-p)^(t-N)*p^N)+2*log((1-pEstimado)^(t-N)*pEstimado^N)
chidist = pchisq(test,1,lower.tail = FALSE)
if(test>chidist){
cat("p estimado =", pEstimado, "es distinto a p =",p)
} else{
cat("p estimado =", pEstimado, "es igual a p =",p)
}
return(chidist)
}
backtestingEj2(simHistoricaEj2VaR(activos$bbva,activos$itx,quantil=0.05,n=10,peso=c(.5,.5)),activos,p=0.05,peso=c(.5,.5))
######################### BACKTESTING ##########################
backtestingEj2 = function(func,activo,p,peso){
rentabilidad = as.matrix(rentabCartera(activo,peso))
comparar = rentabilidad<=func
t = length(rentabilidad)
N = sum(comparar==TRUE)
pEstimado = N/t
test = -2*log((1-p)^(t-N)*p^N)+2*log((1-pEstimado)^(t-N)*pEstimado^N)
chidist = pchisq(test,1,lower.tail = FALSE)
if(test>chidist){
cat("p estimado =", pEstimado, "es distinto a p =",p)
} else{
cat("p estimado =", pEstimado, "es igual a p =",p)
}
return(chidist)
}
backtestingEj2(simHistoricaEj2VaR(activos$bbva,activos$itx,quantil=0.05,n=10,peso=c(.5,.5)),activos,p=0.05,peso=c(.5,.5))
backtestingEj2Var(simHistoricaEj2VaR(activos$bbva,activos$itx,quantil=0.05,n=10,peso=c(.5,.5)),activos,p=0.05,peso=c(.5,.5))
backtestingEj2VaR(simHistoricaEj2VaR(activos$bbva,activos$itx,quantil=0.05,n=10,peso=c(.5,.5)),activos,p=0.05,peso=c(.5,.5))
simHistoricaEj2VaR = function(...,quantil,n,peso){
df = data.frame(...)
Var <- list()
for (col in names(df)) {
x <- df[[col]]
res <- diff(x, n)
last <- tail(x, n=1)
var <- c()
for (i in res) {
var <- c(var, last+i)
}
Var[[col]] <- var
}
rent=rentabCartera(Var,peso)
VaR = unname(quantile(rent,probs=quantil,rm.na=FALSE))
ES = sum(rent[rent<=VaR])/length(rent[rent<=VaR])
result = cbind(VaR)
return(result)
}
backtestingEj2VaR(simHistoricaEj2VaR(activos$bbva,activos$itx,quantil=0.05,n=10,peso=c(.5,.5)),activos,p=0.05,peso=c(.5,.5))
backtestingEj2(simHistoricaEj2VaR(activos$bbva,activos$itx,quantil=0.05,n=10,peso=c(.5,.5)),activos,p=0.05,peso=c(.5,.5))
simHistoricaEj2VaR = function(...,quantil,n,peso){
df = data.frame(...)
Var <- list()
for (col in names(df)) {
x <- df[[col]]
res <- diff(x, n)
last <- tail(x, n=1)
var <- c()
for (i in res) {
var <- c(var, last+i)
}
Var[[col]] <- var
}
rent=rentabCartera(Var,peso)
VaR = unname(quantile(rent,probs=quantil,rm.na=FALSE))
ES = sum(rent[rent<=VaR])/length(rent[rent<=VaR])
result = cbind(VaR)
return(result)
}
simHistoricaEj2(activos$bbva,activos$itx,quantil=0.05,peso=c(.5,.5))
simHistoricaEj2(activos$bbva,activos$itx,quantil=0.05,peso=c(.5,.5),n=10)
simHistoricaEj2VaR(activos$bbva,activos$itx,quantil=0.05,peso=c(.5,.5),n=10)
simHistoricaEj2VaR = function(...,quantil,n,peso){
df = data.frame(...)
Var <- list()
for (col in names(df)) {
x <- df[[col]]
res <- diff(x, n)
last <- tail(x, n=1)
var <- c()
for (i in res) {
var <- c(var, last+i)
}
Var[[col]] <- var
}
rent=rentabCartera(Var,peso)
VaR = unname(quantile(rent,probs=quantil,rm.na=FALSE))
ES = sum(rent[rent<=VaR])/length(rent[rent<=VaR])
return(VaR)
}
simHistoricaEj2VaR(activos$bbva,activos$itx,quantil=0.05,peso=c(.5,.5),n=10)
backtestingEj2(simHistoricaEj2VaR(activos$bbva,activos$itx,quantil=0.05,n=10,peso=c(.5,.5)),activos,p=0.05,peso=c(.5,.5))
backtestingEj2(simHistoricaEj2VaR(activos$bbva,activos$itx,quantil=0.05,n=10,peso=c(.5,.5)),activos,p=0.05,peso=c(.5,.5))
backtesting(simMonteCarloEj2VaR(activos,quantil=0.05,tiempo=252/10,activo=1),activos$bbva,0.05)
simMonteCarloEj2VaR = function(x,dias,prob,peso){
rentabilidad = rentabCartera(x,peso)
deanual = sqrt(dias)*sd(rentabilidad)
mediaanual = dias*mean(rentabilidad)
delta = 1/dias
last = tail(rentabilidad,n=1)
set.seed(2000)
aleatorion = rnorm(length(x),0,1)
precio = last+last*(mediaanual*delta+deanual*sqrt(delta)*aleatorion)
rent = log(precio/last)
VaR = quantile(rent,prob)
ES = sum(rent[rent<=VaR])/length(rent[rent<=VaR])
return(VaR)
}
backtesting(simMonteCarloEj2VaR(activos,quantil=0.05,tiempo=252/10,activo=1),activos$bbva,0.05)
simMonteCarloEj2VaR = function(x,dias,prob,peso){
rentabilidad = rentabCartera(x,peso)
deanual = sqrt(dias)*sd(rentabilidad)
mediaanual = dias*mean(rentabilidad)
delta = 1/dias
last = tail(rentabilidad,n=1)
set.seed(2000)
aleatorion = rnorm(length(x),0,1)
precio = last+last*(mediaanual*delta+deanual*sqrt(delta)*aleatorion)
rent = log(precio/last)
VaR = quantile(rent,prob)
ES = sum(rent[rent<=VaR])/length(rent[rent<=VaR])
return(VaR)
}
backtesting(simMonteCarloEj2VaR(activos,quantil=0.05,tiempo=252/10,activo=1),activos$bbva,0.05)
backtesting(simMonteCarloEj2VaR(activos,quantil=0.05,tiempo=252/10,activo=1),activos$bbva,0.05)
backtesting(simMonteCarloEj2VaR(activos,quantil=0.05,tiempo=252/10,activo=1),activos$bbva,0.05,peso=c(.5,.5))
backtestingEj2(simMonteCarloEj2VaR(activos,quantil=0.05,tiempo=252/10,activo=1),activos$bbva,0.05,peso=c(.5,.5))
backtestingEj2(simMonteCarloEj2(activos,quantil=0.05,tiempo=252/10,activo=1),activos$bbva,0.05,peso=c(.5,.5))
backtestingEj2(simMonteCarloEj2(activos,dias=252/10,prob=0.05,peso=c(.5,.5)),activos,p=0.05,peso=c(.5,.5))
backtestingEj2(simMonteCarloEj2VaR(activos,dias=252/10,prob=0.05,peso=c(.5,.5)),activos,p=0.05,peso=c(.5,.5))
estimParametricaEj2VaR = function(...,quantil,tiempo,gl,peso){
data = data.frame(...)
rentabilidad =  rentabCartera(data,peso)
rentabilidad = as.matrix(rentabilidad)
medias = colMeans(rentabilidad)*tiempo
de = apply(rentabilidad,2,sd)*sqrt(tiempo)
delta = 1/tiempo
quant = qnorm(quantil)
VaRnormal = medias*delta+de*sqrt(delta)*quant
ESnormal = medias*delta-(de*sqrt(delta)/quantil)*dnorm(quant)
studentT = qt(quantil,gl)
VaRtStudent = medias*delta+de*sqrt(delta)*studentT
EStStudent = medias*(delta)-(de*sqrt(delta)/quantil)*sqrt(gl/(gl-2))*dt(quant,gl)*((gl+studentT^2)/(gl-1))
S = skewness(rentabilidad)
K=apply(rentabilidad, 2,kurtosis, type=2)
H2 = quant^2-1
H3 = quant^3 - 3*quant
cuantilCorregido = quant+(S/6)*H2+(K/24)*H3-(S^2/36)*(2*H3+quant)
VaRCorregido = medias*delta+de*sqrt(delta)*cuantilCorregido
return(VaRnormal)
}
backtestingEj2(estimParametricaEj2VaR(activos$bbva,activos$itx,quantil=0.05, tiempo = 252/10,gl=10,peso=c(.5,.5)),activos,p=0.05,peso=c(.5,.5))
garchModelEj2VaR = function(activo,quantil,peso,n){
rentabilidad = rentabCarteraEj2(activo,peso,n)
modelo <- ugarchspec(variance.model = list(model = "sGARCH",
garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0)),
distribution.model = "norm")
modeloGarch = ugarchfit(data=rentabilidad,spec = modelo)
ajustado = modeloGarch@fit$fitted.values
varianza = modeloGarch@fit$var
cuantil = qnorm(quantil)
VaR = ajustado+sqrt(varianza)*cuantil
ES = ajustado-(varianza/quantil)*pnorm(cuantil)
return(VaR)
}
garchModelEj2VaR = function(activo,quantil,peso,n){
rentabilidad = rentabCarteraEj2(activo,peso,n)
modelo <- ugarchspec(variance.model = list(model = "sGARCH",
garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0)),
distribution.model = "norm")
modeloGarch = ugarchfit(data=rentabilidad,spec = modelo)
ajustado = modeloGarch@fit$fitted.values
varianza = modeloGarch@fit$var
cuantil = qnorm(quantil)
VaR = ajustado+sqrt(varianza)*cuantil
ES = ajustado-(varianza/quantil)*pnorm(cuantil)
return(VaR[1])
}
backtestingEj2(garchModelEj2VaR(activos,quantil = 0.05,n=10,peso=c(.5,.5)),5,activos,p=0.05,peso = c(.5,.5))
backtestingEj2(garchModelEj2VaR(activos,quantil = 0.05,n=10,peso=c(.5,.5)),activos,p=0.05,peso = c(.5,.5))
# librerias
library(e1071)
library(rugarch)
source("funciones.R")
source("funciones2.R")
