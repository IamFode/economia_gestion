paises_repetidos <- datos[[columna_paises]][duplicated(datos[[columna_paises]])]
# Iterar sobre los países repetidos
for (pais in paises_repetidos) {
# Filtrar las filas correspondientes al país actual
filas_pais <- datos[[columna_paises]] == pais
# Calcular el número de datos no NA para cada columna a partir de la columna inicial
datos_pais <- datos[filas_pais, columna_inicial:ncol(datos)]
num_datos <- colSums(!is.na(datos_pais))
# Encontrar el índice de la columna con más datos no NA
indice_max_datos <- which.max(num_datos) + (columna_inicial - 1)
# Retener solo el país con más datos no NA
datos[filas_pais, ][seq_along(datos) != indice_max_datos] <- NA
}
# Eliminar filas duplicadas
datos <- datos[!duplicated(datos[[columna_paises]]), ]
# Devolver el resultado final sin países repetidos
return(datos)
}
x=eliminar_paises_repetidos(BM_IFS,"Country Name")
eliminar_paises_repetidos <- function(datos, columna_paises, columna_inicial = 6) {
# Encontrar los países repetidos en la columna indicada
paises_repetidos <- datos[[columna_paises]][duplicated(datos[[columna_paises]])]
# Iterar sobre los países repetidos
for (pais in paises_repetidos) {
# Filtrar las filas correspondientes al país actual
filas_pais <- datos[[columna_paises]] == pais
# Calcular el número de datos no NA para cada columna a partir de la columna inicial
datos_pais <- datos[filas_pais, columna_inicial:ncol(datos)]
num_datos <- colSums(!is.na(datos_pais))
# Encontrar el índice de la columna con más datos no NA
indice_max_datos <- which.max(num_datos) + (columna_inicial - 1)
# Retener solo el país con más datos no NA
datos[filas_pais, ][seq_along(datos) != indice_max_datos] <- NA
}
# Eliminar filas duplicadas
datos <- datos[!duplicated(datos[[columna_paises]]), ]
# Devolver el resultado final sin países repetidos
return(datos)
}
x=eliminar_paises_repetidos(BM_IFS,"Country Name")
x=clean(serie,BM.IFS)
View(x)
qnorm(2.32,lower.tail = FALSE)
qnorm(2.32,lower.tail = True)
qnorm(2)
pnorm(2)
pnorm(2.32,lower.tail = FALSE)
sqrt(25)
1.4/5
rm(series)
################################## DATA ########################################
series = read.csv("timeSeries.csv",check.names=FALSE)
#Series trimestrales
columnasQ = grep("Q",names(series),value = TRUE)
serieQ = series[columnasQ]
serieQ = cbind(series[1:5],serieQ)
serie = serieQ
rm(series)
unique(serie$`Indicator Code`)
x=clean(serie,BM.IFS)
serie
View(serie)
clean(serie,BM_IFS)
?clean()
?clean
################################· LIBRARY ######################################
library(dplyr)
library(openxlsx)
library(forcats)
claen()
?clean()
x=clean(serie,BM.IFS)
BM_IFS = left_join(pais,x,by = c("Country Name","Country Code"))
View(BM_IFS)
################################## DATA ########################################
series = read.csv("timeSeries.csv",check.names=FALSE)
#Series anuales
serie = subset(series,select = -grep("\\d[MQ]\\d",
colnames(series),
perl = TRUE,
ignore.case = FALSE))
##### BM-IFS #####
BM.IFS = c("FASMB_XDC",
"FASMBC_EUR",
"FMA_USD", #Solo en el caso de que no haya datos para FASMB, o la serie sea idéntica a FASMB pero más larga.
"FMA_XDC", #Solo en el caso de que no haya datos para FASMB, o la serie sea idéntica a FASMB pero más larga.
"FM0_XDC") #Solo en el caso de que no haya datos para FASMB, o la serie sea idéntica a FASMB pero más larga.
x=clean(serie,BM.IFS)
BM_IFS = left_join(pais,x,by = c("Country Name","Country Code"))
################################## DATA ########################################
series = read.csv("timeSeries.csv",check.names=FALSE)
# FUNCTIONS
source("functions_clean.R")
#LIBRARIES
library(dplyr)
library(openxlsx)
library(forcats)
pais = read.csv("paises.csv",check.names = FALSE)
#Series trimestrales
columnasQ = grep("Q",names(series),value = TRUE)
serieQ = series[columnasQ]
serieQ = cbind(series[1:5],serieQ)
serieQ[is.na(serieQ)] = NA
serieQ[serieQ==""] = NA
serieQ=sapply(serie, function(col) replace(col, is.character(col), NA))
serieQ=sapply(serieQ, function(col) replace(col, is.character(col), NA))
#Series trimestrales
columnasQ = grep("Q",names(series),value = TRUE)
serieQ = series[columnasQ]
serieQ = cbind(series[1:5],serieQ)
serieQ[is.na(serieQ)] = NA
serieQ[serieQ==""] = NA
serieQ=serieQ[, 6:length(serieQ)] <- sapply(serieQ[, 6:length(serieQ)], function(col) replace(col, is.character(col), NA))
#Series trimestrales
columnasQ = grep("Q",names(series),value = TRUE)
serieQ = series[columnasQ]
serieQ = cbind(series[1:5],serieQ)
serieQ[is.na(serieQ)] = NA
serieQ[serieQ==""] = NA
serieQ[, 6:length(serieQ)] <- sapply(serieQ[, 6:length(serieQ)], function(col) replace(col, is.character(col), NA))
View(serieQ)
x=serie[!apply(is.na(serie[, 6:ncol(serie)]), 1, all), ]
##### RM-Currency #####
RM.currency = c("14A___XDC",
"14A___USD")
x=serie[!apply(is.na(serie[, 6:ncol(serie)]), 1, all), ]
rm(serie)
serie = serieQ
##### RM-Currency #####
RM.currency = c("14A___XDC",
"14A___USD")
x=serie[!apply(is.na(serie[, 6:ncol(serie)]), 1, all), ]
x=prueba[prueba$`Indicator Code` %in% RM.currency, ]
x=x[x$`Indicator Code` %in% RM.currency, ]
RM_currency = left_join(pais,x,by = c("Country Name","Country Code"))
View(RM_currency)
x=clean(serie,RM.currency)
# FUNCTIONS
source("functions_clean.R")
x=clean2(serie,currency.IFS) # para datos trimestrales y mensuales
##### Currency-IFS #####
currency.IFS = c("FASMBC_XDC",
"FASMBC_USD",
"FASMBC_EUR")
x=clean2(serie,currency.IFS) # para datos trimestrales y mensuales
currency_IFS = left_join(pais, x, by = c("Country Name","Country Code"))
View(currency_IFS)
clean2 = function(serie, condition) {
x <- serie[!apply(is.na(serie[, 6:ncol(serie)]), 1, all), ]
x <- x[x$`Indicator Code` %in% condition, ]
condition_data <- left_join(pais, x, by = c("Country Name", "Country Code"))
return(condition_data)
}
# FUNCTIONS
source("functions_clean.R")
#LIBRARIES
library(dplyr)
library(openxlsx)
library(forcats)
################################## DATA ########################################
series = read.csv("timeSeries.csv",check.names=FALSE)
pais = read.csv("paises.csv",check.names = FALSE)
#Series trimestrales
columnasQ = grep("Q",names(series),value = TRUE)
serieQ = series[columnasQ]
serieQ = cbind(series[1:5],serieQ)
serieQ[is.na(serieQ)] = NA
serieQ[serieQ==""] = NA
serieQ[, 6:length(serieQ)] <- sapply(serieQ[, 6:length(serieQ)], function(col) replace(col, is.character(col), NA))
serie = serieQ
rm(series)
##### Currency-IFS #####
currency.IFS = c("FASMBC_XDC",
"FASMBC_USD",
"FASMBC_EUR")
x=clean2(serie,currency.IFS) # para datos trimestrales y mensuales
View(x)
View(serieQ)
# FUNCTIONS
source("functions_clean.R")
x=clean2(serie,currency.IFS) # para datos trimestrales y mensuales
currency_IFS = left_join(pais, x, by = c("Country Name","Country Code"))
x=clean2(serie,RM.currency) # trimetral y mensual
##### RM-Currency #####
RM.currency = c("14A___XDC",
"14A___USD")
x=clean2(serie,RM.currency) # trimetral y mensual
RM_currency = left_join(pais,x,by = c("Country Name","Country Code"))
x=clean2(serie,BM.IFS) # trimentral y mensual
##### BM-IFS #####
BM.IFS = c("FASMB_XDC",
"FASMBC_EUR",
"FMA_USD", #Solo en el caso de que no haya datos para FASMB, o la serie sea idéntica a FASMB pero más larga.
"FMA_XDC", #Solo en el caso de que no haya datos para FASMB, o la serie sea idéntica a FASMB pero más larga.
"FM0_XDC") #Solo en el caso de que no haya datos para FASMB, o la serie sea idéntica a FASMB pero más larga.
x=clean2(serie,BM.IFS) # trimentral y mensual
BM_IFS = left_join(pais,x,by = c("Country Name","Country Code"))
BM_IFS = eliminar_fila_BM.IFS(BM_IFS,"FASMB_XDC")
x=clean(serie,BM.Nac.IFS)
##### BM-Nac-IFS #####
BM.Nac.IFS = c("FMA_USD",
"FMA_XDC",
"FM0_XDC")
x=clean(serie,BM.Nac.IFS)
x=clean2(serie,BM.Nac.IFS) #Trimestral y Mensual
BM_Nac_IFS = left_join(pais,x,by = c("Country Name","Country Code"))
View(x)
##### M1 #####
M1. = c("FM1_XDC",
"FMN_XDC",
"FMN_USD",
"FM1_A1_XDC",
"FM1_A2_XDC",
"FM1_A3_XDC",
"FM1_EUR",
"FM1_USD",
"FMM_XDC")
x=clean2(serie,M1.) #trimestral y mensual
M1 = left_join(pais,x,by = c("Country Name","Country Code"))
M1 = eliminar_filas_duplicadas(M1,c("FM1_XDC", "FM1_A1_XDC", "FM1_A2_XDC", "FM1_A3_XDC"))
##### M2-Broad Money - IFS #####
M2.BroadMoney.IFS = c("FDSB_XDC",
"FDSBC_EUR",
"FMB_USD")
x=clean2(serie,M2.BroadMoney.IFS)
M2_BroadMoney_IFS = left_join(pais,x,by = c("Country Name","Country Code"))
##### M2-Nac #####
M2.Nac = c("FM2_XDC",
"FM2_A1_XDC",
"FM2_USD",
"FM2_EUR")
x=clean2(serie,M2.Nac) # Trimestral y mensual
M2_Nac = left_join(pais,x,by = c("Country Name","Country Code"))
M2_Nac = eliminar_filas_duplicadas(M2_Nac,c("FM2_XDC", "FM2_A1_XDC"))
##### M3 #####
M3. = c("FM3_XDC")
x=clean2(serie,M3.)# trimestral y mensual
M3 = left_join(pais,x,by = c("Country Name","Country Code"))
##### M4 #####
M4. = c("FM4_XDC",
"FM4_A1_XDC",
"FM4_A2_XDC",
"FM4_A3_XDC")
x=clean2(serie,M4.) #trimenstral y mensual
M4 = left_join(pais,x,by = c("Country Name","Country Code"))
M4 = eliminar_filas_duplicadas(M4,M4.)
##### M4 #####
M4. = c("FM4_XDC",
"FM4_A1_XDC",
"FM4_A2_XDC",
"FM4_A3_XDC")
x=clean2(serie,M4.) #trimenstral y mensual
##### M4 #####
M4. = c("FM4_XDC",
"FM4_A1_XDC",
"FM4_A2_XDC",
"FM4_A3_XDC")
x=clean2(serie,M4.) #trimenstral y mensual
M4 = left_join(pais,x,by = c("Country Name","Country Code"))
M4 = eliminar_filas_duplicadas(M4,M4.)
View(M4)
eliminar_filas_duplicadas <- function(df, categorias) {
M1prueba = which(duplicated(df$`Country Name`))
maxima_flla = c()
for (i in 1:length(M1prueba)) {
pais1 = df[M1prueba[i]-1, "Indicator Code"]
pais2 = df[M1prueba[i], "Indicator Code"]
indice1 <- match(pais1, categorias)
indice2 <- match(pais2, categorias)
if (indice1 <= indice2) {
maximo <- pais2
fila <- M1prueba[i]
} else {
maximo <- pais1
fila <- M1prueba[i]-1
}
maxima_flla <- c(maxima_flla, fila)
}
df <- df[-maxima_flla, ]
return(df)
}
x=clean2(serie,M4.) #trimenstral y mensual
M4 = left_join(pais,x,by = c("Country Name","Country Code"))
M4 = eliminar_filas_duplicadas(M4,M4.)
##### M4 #####
M4. = c("FM4_XDC",
"FM4_A1_XDC",
"FM4_A2_XDC",
"FM4_A3_XDC")
x=clean(serie,M4.)
x=clean2(serie,M4.) #trimenstral y mensual
M4 = left_join(pais,x,by = c("Country Name","Country Code"))
M4 = eliminar_filas_duplicadas(M4,M4.)
# FUNCTIONS
source("functions_clean.R")
x=clean2(serie,M4.) #trimenstral y mensual
M4 = left_join(pais,x,by = c("Country Name","Country Code"))
M4 = eliminar_filas_duplicadas(M4,M4.)
##### M5 #####
M5. = c("FMA_XDC",
"FM5B_XDC",
"FM5_XDC")
x=clean2(serie,M5.)
M5 = left_join(pais,x,by = c("Country Name","Country Code"))
M5 = eliminar_filas_duplicadas(M5,M5.)
##### RR #####
RR. = c("FOSAAR_XDC",
"FOSAAR_EUR",
"FOSAAR_USD")
x=clean(serie,RR.)
x=clean2(serie,RR.)
RR = left_join(pais,x,by = c("Country Name","Country Code"))
##### RR2 #####
RR2=RR
# FUNCTIONS
source("functions_clean.R")
##### M4 #####
M4. = c("FM4_XDC",
"FM4_A1_XDC",
"FM4_A2_XDC",
"FM4_A3_XDC")
x=clean2(serie,M4.) #trimenstral y mensual
View(x)
# FUNCTIONS
source("functions_clean.R")
##### M4 #####
M4. = c("FM4_XDC",
"FM4_A1_XDC",
"FM4_A2_XDC",
"FM4_A3_XDC")
x=clean2(serie,M4.) #trimenstral y mensual
M4 = left_join(pais,x,by = c("Country Name","Country Code"))
M4 = eliminar_filas_duplicadas(M4,M4.)
# FUNCTIONS
source("functions_clean.R")
x=clean2(serie,M4.) #trimenstral y mensual
M4 = left_join(pais,x,by = c("Country Name","Country Code"))
M4 = eliminar_filas_duplicadas(M4,M4.)
eliminar_filas_duplicadas <- function(df, categorias) {
M1prueba <- which(duplicated(df$`Country Name`))
maxima_fila <- c()
for (i in 1:length(M1prueba)) {
paises <- list()
filas <- c(M1prueba[i]-1, M1prueba[i])
for (j in 1:length(filas)) {
pais <- df[filas[j], "Indicator Code"]
indice <- match(pais, categorias)
paises[[j]] <- list(pais = pais, indice = indice)
}
paises_ordenados <- paises[order(sapply(paises, function(x) x$indice), decreasing = TRUE)]
fila_maxima <- filas[paises_ordenados[[1]]$pais == df[filas, "Indicator Code"]]
maxima_fila <- c(maxima_fila, fila_maxima)
}
df <- df[-maxima_fila, ]
return(df)
}
# FUNCTIONS
source("functions_clean.R")
x=clean2(serie,M4.) #trimenstral y mensual
M4 = left_join(pais,x,by = c("Country Name","Country Code"))
M4 = eliminar_filas_duplicadas(M4,M4.)
eliminar_filas_duplicadas <- function(df, categorias, paises) {
maxima_fila <- c()
for (pais in paises) {
M1prueba <- which(df$`Country Name` == pais & duplicated(df$`Country Name`))
for (i in 1:length(M1prueba)) {
filas_a_comparar <- c(M1prueba[i] - 1, M1prueba[i])
paises_a_comparar <- df[filas_a_comparar, "Indicator Code"]
indices <- match(paises_a_comparar, categorias)
indice_max <- which.min(indices)
fila_max <- filas_a_comparar[indice_max]
maxima_fila <- c(maxima_fila, fila_max)
}
}
df <- df[-maxima_fila, ]
return(df)
}
# FUNCTIONS
source("functions_clean.R")
x=clean2(serie,M4.) #trimenstral y mensual
M4 = left_join(pais,x,by = c("Country Name","Country Code"))
M4 = eliminar_filas_duplicadas(M4,M4.)
eliminar_filas_duplicadas <- function(df, categorias) {
paises <- unique(df$`Country Name`)
maxima_fila <- c()
for (pais in paises) {
M1prueba <- which(df$`Country Name` == pais & duplicated(df$`Country Name`))
for (i in 1:length(M1prueba)) {
filas_a_comparar <- c(M1prueba[i] - 1, M1prueba[i])
paises_a_comparar <- unique(df$`Country Name`[filas_a_comparar])
indices <- match(df[filas_a_comparar, "Indicator Code"], categorias)
indice_max <- which.min(indices)
fila_max <- filas_a_comparar[indice_max]
maxima_fila <- c(maxima_fila, fila_max)
}
}
df <- df[-maxima_fila, ]
return(df)
}
# FUNCTIONS
source("functions_clean.R")
##### M4 #####
M4. = c("FM4_XDC",
"FM4_A1_XDC",
"FM4_A2_XDC",
"FM4_A3_XDC")
x=clean2(serie,M4.) #trimenstral y mensual
M4 = left_join(pais,x,by = c("Country Name","Country Code"))
M4 = eliminar_filas_duplicadas(M4,M4.)
##### M3 #####
M3. = c("FM3_XDC")
x=clean(serie,M3.)
x=clean2(serie,M3.)# trimestral y mensual
M3 = left_join(pais,x,by = c("Country Name","Country Code"))
##### M2-Nac #####
M2.Nac = c("FM2_XDC",
"FM2_A1_XDC",
"FM2_USD",
"FM2_EUR")
x=clean2(serie,M2.Nac) # Trimestral y mensual
M2_Nac = left_join(pais,x,by = c("Country Name","Country Code"))
M2_Nac = eliminar_filas_duplicadas(M2_Nac,c("FM2_XDC", "FM2_A1_XDC"))
##### M1 #####
M1. = c("FM1_XDC",
"FMN_XDC",
"FMN_USD",
"FM1_A1_XDC",
"FM1_A2_XDC",
"FM1_A3_XDC",
"FM1_EUR",
"FM1_USD",
"FMM_XDC")
x=clean2(serie,M1.) #trimestral y mensual
M1 = left_join(pais,x,by = c("Country Name","Country Code"))
M1 = eliminar_filas_duplicadas(M1,c("FM1_XDC", "FM1_A1_XDC", "FM1_A2_XDC", "FM1_A3_XDC"))
wb = createWorkbook()
#Hoja Currency-IFS
addWorksheet(wb,"Currency-IFS")
writeData(wb,"Currency-IFS",currency_IFS)
# Hoja RM-Currency
addWorksheet(wb,"RM-Currency")
writeData(wb,"RM-Currency",RM_currency)
# Hoja BM-IFS
addWorksheet(wb,"BM-IFS")
writeData(wb,"BM-IFS",BM_IFS)
# Hoja BM-Nac-IFS
addWorksheet(wb,"BM-Nac-IFS")
writeData(wb,"BM-Nac-IFS",BM_Nac_IFS)
# Hoja M1
addWorksheet(wb,"M1")
writeData(wb,"M1",M1)
# Hoja M2-Broad Money-IFS
addWorksheet(wb,"M2-Broad Money-IFS")
writeData(wb,"M2-Broad Money-IFS",M2_BroadMoney_IFS)
# Hoja M2-Nac
addWorksheet(wb,"M2-Nac")
writeData(wb,"M2-Nac",M2_Nac)
# Hoja M3
addWorksheet(wb,"M3")
writeData(wb,"M3",M3)
# Hoja M4
addWorksheet(wb,"M4")
writeData(wb,"M4",M4)
# Hoja M5
addWorksheet(wb,"M5")
writeData(wb,"M5",M5)
# Hoja RR
addWorksheet(wb,"RR")
writeData(wb,"RR",RR)
# Hoja RR2
addWorksheet(wb,"RR2")
writeData(wb,"RR2",RR2)
saveWorkbook(wb,"SeriesTrimestrales.xlsx",overwrite = TRUE)
################################## DATA ########################################
series = read.csv("timeSeries.csv",check.names=FALSE)
pais = read.csv("paises.csv",check.names = FALSE)
# FUNCTIONS
source("functions_clean.R")
#LIBRARIES
library(dplyr)
library(openxlsx)
library(forcats)
#Series trimestrales
columnasM = grep("M",names(series),value = TRUE)
serieM = series[columnasM]
serieM = cbind(series[1:5],serieM)
rm(series)
serieM[is.na(serieM)] = NA
serieM[serieM==""] = NA
#general
serie = serieM
rm(seriesM)
rm(serieM)
`"
Verificamos que esten todos los años/trimestres/meses en el intervalo [1948,2017]
"`
View(serie)
unique(serie$`Indicator Code`)
colnames(serie)
##### Currency-IFS #####
currency.IFS = c("FASMBC_XDC",
"FASMBC_USD",
"FASMBC_EUR")
x=clean(serie,currency.IFS)
x=clean2(serie,currency.IFS) # para datos trimestrales y mensuales
currency_IFS = left_join(pais, x, by = c("Country Name","Country Code"))
##### RM-Currency #####
RM.currency = c("14A___XDC",
"14A___USD")
x=clean2(serie,RM.currency) # trimetral y mensual
RM_currency = left_join(pais,x,by = c("Country Name","Country Code"))
View(RM_currency)
