assign(condition, x, envir = .GlobalEnv)
as.data.frame(x)
} else {
NULL
}
})
df <- do.call(rbind, df)
return(df)
}
filtrar_y_combinar(serie,RM.currency)
x=filtrar_y_combinar(serie,RM.currency)
rm("14A___USD")
x=filtrar_y_combinar(serie,RM.currency)
filtrar_datos = function(dataset, condition) {
x = dataset[dataset$`Indicator Code` == condition, ]
i = length(unique(x$`Country Name`))
x = x[apply(x[, 6:ncol(x)], 1,
function(x) any(!is.na(x))) & !duplicated(x$`Country Code`), ]
f = length(x$`Country Name`)
if (i == f) {
assign(condition, x, envir = .GlobalEnv)
x=as.data.frame(x)
} else {
return(NULL)
}
}
iterar = function(data,code){
df = data.frame()
for(i in 1:length(code)){
df_ = filtrar_datos(data,code[i])
df = rbind(df,df_)
}
return(df)
}
x=iterar(serie,RM.currency)
rm(x)
rm("14___USD")
rm("14A___USD")
x=iterar(serie,RM.currency)
rm(df)
rm(x)
rm("14A___XDC")
rm("14A___USD")
filtrar_y_combinar <- function(dataset, condition_list) {
df <- data.frame()
filtrar_datos <- function(dataset, condition) {
x <- dataset[dataset$`Indicator Code` == condition, ]
i <- length(unique(x$`Country Name`))
x <- x[apply(x[, 6:ncol(x)], 1, function(x) any(!is.na(x))) & !duplicated(x$`Country Code`), ]
f <- length(x$`Country Name`)
if (i == f) {
df <<- rbind(df, x)
}
}
for (condition in condition_list) {
filtrar_datos(dataset, condition)
}
return(df)
}
filtrar_y_combinar(serie,RM.currency)
x=filtrar_y_combinar(serie,RM.currency)
limpieza = function(dataset, condition_list) {
df = data.frame()
filtrar_datos = function(dataset, condition) {
x = dataset[dataset$`Indicator Code` == condition, ]
i = length(unique(x$`Country Name`))
x = x[apply(x[, 6:ncol(x)], 1, function(x) any(!is.na(x))) & !duplicated(x$`Country Code`), ]
f = length(x$`Country Name`)
if (i == f) {
df <<- rbind(df, x)
}
}
for (condition in condition_list) {
filtrar_datos(dataset, condition)
}
return(df)
}
clean = function(dataset, condition_list) {
df = data.frame()
filtrar_datos = function(dataset, condition) {
x = dataset[dataset$`Indicator Code` == condition, ]
i = length(unique(x$`Country Name`))
x = x[apply(x[, 6:ncol(x)], 1, function(x) any(!is.na(x))) & !duplicated(x$`Country Code`), ]
f = length(x$`Country Name`)
if (i == f) {
df <<- rbind(df, x)
}
}
for (condition in condition_list) {
filtrar_datos(dataset, condition)
}
return(df)
}
########## CIRCULATION ##########
##### Currency-IFS #####
currency.IFS = c("FASMBC_XDC",
"FASMBC_USD",
"FASMBC_EUR")
x=clean(serie,currency.IFS)
currency_IFS = left_join(pais, x, by = c("Country Name","Country Code"))
################################· LIBRARY ######################################
library(dplyr)
library(openxlsx)
########## CIRCULATION ##########
##### Currency-IFS #####
currency.IFS = c("FASMBC_XDC",
"FASMBC_USD",
"FASMBC_EUR")
x=clean(serie,currency.IFS)
currency_IFS = left_join(pais, x, by = c("Country Name","Country Code"))
View(currency_IFS)
##### RM-Currency #####
RM.currency = c("14A___XDC",
"14A___USD")
x=clean(serie,RM.currency)
RM_currency = left_join(pais,x,by = c("Country Name","Country Code"))
rm(df_)
View(RM_currency)
##### BM-Currency #####
BM.IFS = c("FASMB_XDC",
"FASMBC_EUR",
"FMA_USD",
"FMA_XDC",
"FM0_XDC")
##### BM-Currency #####
BM.IFS = c("FASMB_XDC",
"FASMBC_EUR",
"FMA_USD",
"FMA_XDC",
"FM0_XDC")
x=clean(serie,BM.IFS)
BM_IFS = left_join(pais,x,by = c("Country Name","Country Code"))
View(BM_IFS)
View(serie)
clean = function(dataset, condition_list) {
df = data.frame()
filtrar_datos = function(dataset, condition) {
x = dataset[dataset$`Indicator Code` == condition, ]
i = length(unique(x$`Country Name`))
x = x[apply(x[, 6:ncol(x)], 1, function(x) any(!is.na(x))) & !duplicated(x$`Country Code`), ]
f = length(x$`Country Name`)
if (i == f) {
df <<- rbind(df, x)
}
}
for (condition in condition_list) {
filtrar_datos(dataset, condition)
}
return(df)
}
clean = function(dataset, condition_list) {
df = data.frame()
filtrar_datos = function(dataset, condition) {
x = dataset[dataset$`Indicator Code` == condition, ]
i = length(unique(x$`Country Name`))
x = x[apply(x[, 6:ncol(x)], 1, function(x) any(!is.na(x))) & !duplicated(x$`Country Code`), ]
f = length(x$`Country Name`)
if (i == f) {
df <<- rbind(df, x)
}
}
for (condition in condition_list) {
filtrar_datos(dataset, condition)
}
return(df)
}
################################· LIBRARY ######################################
library(dplyr)
library(openxlsx)
################################## DATA ########################################
serie = read.csv("timeSeries.csv",check.names=FALSE)
pais = read.csv("paises.csv",check.names = FALSE)
serie = subset(serie,select = -grep("\\d[MQ]\\d",
colnames(serie),
perl = TRUE,
ignore.case = FALSE))
serie[is.na(serie)] = NA
serie[serie==""] = NA
########## CIRCULATION ##########
##### Currency-IFS #####
currency.IFS = c("FASMBC_XDC",
"FASMBC_USD",
"FASMBC_EUR")
x=clean(serie,currency.IFS)
currency_IFS = left_join(pais, x, by = c("Country Name","Country Code"))
##### RM-Currency #####
RM.currency = c("14A___XDC",
"14A___USD")
x=clean(serie,RM.currency)
RM_currency = left_join(pais,x,by = c("Country Name","Country Code"))
##### BM-Currency #####
BM.IFS = c("FASMB_XDC",
"FASMBC_EUR",
"FMA_USD",
"FMA_XDC",
"FM0_XDC")
x=clean(serie,BM.IFS)
BM_IFS = left_join(pais,x,by = c("Country Name","Country Code"))
View(BM_IFS)
##### BM-Nac-IFS #####
BM.Nac.IFS = c("FMA_USD",
"FMA_XDC",
"FM0_XDC")
##### BM-Nac-IFS #####
BM.Nac.IFS = c("FMA_USD",
"FMA_XDC",
"FM0_XDC")
x=clean(serie,BM.Nac.IFS)
BM_Nac_IFS = left_join(pais,x,by = c("Country Name","Country Code"))
View(BM_Nac_IFS)
table(unique(serie$`Indicator Code`))
View(serie)
##### M1 #####
M1. = c("FM1_XDC",
"FDSBC_XDC",
"FDSBT_XDC",
"FMN_XDC",
"FMN_USD",
"FM1_A1_XDC",
"FM1_A2_XDC",
"FM1_A3_XDC",
"FM1_EUR",
"FM1_USD",
"FMM_XDC")
x=clean(serie,M1.)
M1 = left_join(pais,x,by = c("Country Name","Country Code"))
View(M1)
##### M1 #####
M1. = c("FM1_XDC",
"FMN_XDC",
"FMN_USD",
"FM1_A1_XDC",
"FM1_A2_XDC",
"FM1_A3_XDC",
"FM1_EUR",
"FM1_USD",
"FMM_XDC")
x=clean(serie,M1.)
M1 = left_join(pais,x,by = c("Country Name","Country Code"))
View(M1)
##### M2-Broad Money - IFS #####
M2.BroadMoney.IFS = c("FDSB_XDC",
"FMB_XDC",
"FDSBC_EUR",
"FMB_EUR",
"FMB_USD",
"FDSB_USD",)
##### M2-Broad Money - IFS #####
M2.BroadMoney.IFS = c("FDSB_XDC",
"FMB_XDC",
"FDSBC_EUR",
"FMB_EUR",
"FMB_USD",
"FDSB_USD",)
x=clean(serie,M2.BroadMoney.IFS)
##### M2-Broad Money - IFS #####
M2.BroadMoney.IFS = c("FDSB_XDC",
"FMB_XDC",
"FDSBC_EUR",
"FMB_EUR",
"FMB_USD",
"FDSB_USD")
x=clean(serie,M2.BroadMoney.IFS)
M2_BroadMoney_IFS = left_join(pais,x,by = c("Country Name","Country Code"))
##### M2-Nac #####
M2.Nac = c("FM2_XDC",
"FM2_A1_XDC",
"FM2_A1_XDC",
"FM2_USD",
"FM2_EUR")
##### M2-Nac #####
M2.Nac = c("FM2_XDC",
"FM2_A1_XDC",
"FM2_A1_XDC",
"FM2_USD",
"FM2_EUR")
x=clean(serie,M2.Nac)
x=clean(serie,M2.Nac)
M2_Nac = left_join(pais,x,by = c("Country Name","Country Code"))
##### M3 #####
M3. = c("FM3_XDC")
##### M3 #####
M3. = c("FM3_XDC")
x=clean(serie,M3.)
M3 = left_join(pais,x,by = c("Country Name","Country Code"))
View(M3)
##### M4 #####
M4. = c("FM4_XDC",
"FM4_A1_XDC",
"FM4_A2_XDC",
"FM4_A3_XDC")
x=clean(serie,M4.)
M4 = left_join(pais,x,by = c("Country Name","Country Code"))
##### M4 #####
M4. = c("FM4_XDC",
"FM4_A1_XDC",
"FM4_A2_XDC",
"FM4_A3_XDC")
x=clean(serie,M4.)
M4 = left_join(pais,x,by = c("Country Name","Country Code"))
View(M4)
##### M4 #####
M4. = c("FM4_XDC",
"FM4_A1_XDC",
"FM4_A2_XDC",
"FM4_A3_XDC")
x=clean(serie,M4.)
##### M4 #####
M4. = c("FM4_XDC",
"FM4_A1_XDC",
"FM4_A2_XDC",
"FM4_A3_XDC")
x=clean(serie,M4.)
View(x)
##### M5 #####
M5. = c("FMA_XDC",
"FM5B_XDC",
"FM5_XDC")
x=clean(serie,M5.)
M5 = left_join(pais,x,by = c("Country Name","Country Code"))
##### RR #####
RR. = c("FOSAAR_XDC",
"FOSAAR_EUR",
"FOSAAR_USD")
##### RR #####
RR. = c("FOSAAR_XDC",
"FOSAAR_EUR",
"FOSAAR_USD")
x=clean(serie,RR.)
RR = left_join(pais,x,by = c("Country Name","Country Code"))
##### BM.IFS #####
BM.IFS = c("FASMB_XDC",
"FASMBC_EUR",
"FMA_USD", #Solo en el caso de que no haya datos para FASMB, o la serie sea idéntica a FASMB pero más larga.
"FMA_XDC", #Solo en el caso de que no haya datos para FASMB, o la serie sea idéntica a FASMB pero más larga.
"FM0_XDC") #Solo en el caso de que no haya datos para FASMB, o la serie sea idéntica a FASMB pero más larga.
x=clean(serie,BM.IFS)
BM_IFS = left_join(pais,x,by = c("Country Name","Country Code"))
View(BM_IFS)
unique(BM_IFS$`Indicator Code`)
View(BM_IFS)
View(BM_IFS)
eliminar_paises_repetidos <- function(datos, columna_paises, columna_inicial = 6) {
# Encontrar los países repetidos en la columna indicada
paises_repetidos <- datos[[columna_paises]][duplicated(datos[[columna_paises]])]
# Iterar sobre los países repetidos
for (pais in paises_repetidos) {
# Filtrar las filas correspondientes al país actual
filas_pais <- datos[[columna_paises]] == pais
# Calcular el número de datos para cada columna a partir de la columna inicial
datos_pais <- datos[filas_pais, columna_inicial:ncol(datos)]
num_datos <- colSums(!is.na(datos_pais))
# Encontrar el índice de la columna con más datos
indice_max_datos <- which.max(num_datos) + (columna_inicial - 1)
# Eliminar las filas del país actual, excepto las de la columna con más datos
datos <- datos[!(filas_pais & seq_along(datos) != indice_max_datos), ]
}
# Devolver el resultado final
return(datos)
}
View(BM_IFS)
x=eliminar_paises_repetidos(BM_IFS,"Country Name")
View(x)
x=eliminar_paises_repetidos(BM_IFS,"Country Name")
View(x)
View(x)
View(BM_IFS)
View(x)
datos=BM_IFS
columna_paises="Country Name"
datos[[columna_paises]][duplicated(datos[[columna_paises]])]
duplicated(datos[columna_paises])
duplicated(datos[datos[columna_paises]])
duplicated(datos[[columna_paises]])
datos[[columna_paises]][duplicated(datos[[columna_paises]])]
View(x)
View(BM_IFS)
eliminar_paises_repetidos <- function(datos, columna_paises, columna_inicial = 6) {
# Encontrar los países repetidos en la columna indicada
paises_repetidos <- datos[[columna_paises]][duplicated(datos[[columna_paises]])]
# Iterar sobre los países repetidos
for (pais in paises_repetidos) {
# Filtrar las filas correspondientes al país actual
filas_pais <- datos[[columna_paises]] == pais
# Calcular el número de datos no NA para cada columna a partir de la columna inicial
datos_pais <- datos[filas_pais, columna_inicial:ncol(datos)]
num_datos <- colSums(!is.na(datos_pais))
# Encontrar el índice de la columna con más datos no NA
indice_max_datos <- which.max(num_datos) + (columna_inicial - 1)
# Retener solo el país con más datos no NA
datos[filas_pais, ] <- datos[filas_pais, ][seq_along(datos) == indice_max_datos, ]
}
# Devolver el resultado final sin países repetidos
return(datos)
}
x=eliminar_paises_repetidos(BM_IFS,"Country Name")
eliminar_paises_repetidos <- function(datos, columna_paises, columna_inicial = 6) {
# Encontrar los países repetidos en la columna indicada
paises_repetidos <- datos[[columna_paises]][duplicated(datos[[columna_paises]])]
# Iterar sobre los países repetidos
for (pais in paises_repetidos) {
# Filtrar las filas correspondientes al país actual
filas_pais <- datos[[columna_paises]] == pais
# Calcular el número de datos no NA para cada columna a partir de la columna inicial
datos_pais <- datos[filas_pais, columna_inicial:ncol(datos)]
num_datos <- colSums(!is.na(datos_pais))
# Encontrar el índice de la columna con más datos no NA
indice_max_datos <- which.max(num_datos) + (columna_inicial - 1)
# Retener solo el país con más datos no NA
datos[filas_pais, ] <- datos[filas_pais, ][seq_along(datos) == indice_max_datos, ]
}
# Devolver el resultado final sin países repetidos
return(datos)
}
x=eliminar_paises_repetidos(BM_IFS,"Country Name")
eliminar_paises_repetidos <- function(datos, columna_paises, columna_inicial = 6) {
# Encontrar los países repetidos en la columna indicada
paises_repetidos <- datos[[columna_paises]][duplicated(datos[[columna_paises]])]
# Iterar sobre los países repetidos
for (pais in paises_repetidos) {
# Filtrar las filas correspondientes al país actual
filas_pais <- datos[[columna_paises]] == pais
# Calcular el número de datos no NA para cada columna a partir de la columna inicial
datos_pais <- datos[filas_pais, columna_inicial:ncol(datos)]
num_datos <- colSums(!is.na(datos_pais))
# Encontrar el índice de la columna con más datos no NA
indice_max_datos <- which.max(num_datos) + (columna_inicial - 1)
# Retener solo el país con más datos no NA
datos[filas_pais, ] <- replace(datos[filas_pais, ], TRUE, NA)
datos[filas_pais, ][seq_along(datos) == indice_max_datos, ] <- datos_pais[seq_along(datos_pais) == indice_max_datos]
}
# Eliminar filas duplicadas
datos <- datos[!duplicated(datos[[columna_paises]]), ]
# Devolver el resultado final sin países repetidos
return(datos)
}
x=eliminar_paises_repetidos(BM_IFS,"Country Name")
View(BM_IFS)
eliminar_paises_repetidos <- function(datos, columna_paises, columna_inicial = 6) {
# Encontrar los países repetidos en la columna indicada
paises_repetidos <- datos[[columna_paises]][duplicated(datos[[columna_paises]])]
# Iterar sobre los países repetidos
for (pais in paises_repetidos) {
# Filtrar las filas correspondientes al país actual
filas_pais <- datos[[columna_paises]] == pais
# Calcular el número de datos no NA para cada columna a partir de la columna inicial
datos_pais <- datos[filas_pais, columna_inicial:ncol(datos)]
num_datos <- colSums(!is.na(datos_pais))
# Encontrar el índice de la columna con más datos no NA
indice_max_datos <- which.max(num_datos) + (columna_inicial - 1)
# Retener solo el país con más datos no NA
datos[filas_pais, columna_inicial:(ncol(datos) - 1)] <- NA
datos[filas_pais, indice_max_datos] <- datos_pais[[indice_max_datos - columna_inicial + 1]]
}
# Eliminar filas duplicadas
datos <- datos[!duplicated(datos[[columna_paises]]), ]
# Devolver el resultado final sin países repetidos
return(datos)
}
x=eliminar_paises_repetidos(BM_IFS,"Country Name")
View(x)
eliminar_paises_repetidos <- function(datos, columna_paises, columna_inicial = 6) {
# Encontrar los países repetidos en la columna indicada
paises_repetidos <- datos[[columna_paises]][duplicated(datos[[columna_paises]])]
# Iterar sobre los países repetidos
for (pais in paises_repetidos) {
# Filtrar las filas correspondientes al país actual
filas_pais <- datos[[columna_paises]] == pais
# Calcular el número de datos no NA para cada columna a partir de la columna inicial
datos_pais <- datos[filas_pais, columna_inicial:ncol(datos)]
num_datos <- colSums(!is.na(datos_pais))
# Encontrar el índice de la columna con más datos no NA
indice_max_datos <- which.max(num_datos) + (columna_inicial - 1)
# Retener solo el país con más datos no NA
datos[filas_pais, ][seq_along(datos) != indice_max_datos] <- NA
}
# Eliminar filas duplicadas
datos <- datos[!duplicated(datos[[columna_paises]]), ]
# Devolver el resultado final sin países repetidos
return(datos)
}
x=eliminar_paises_repetidos(BM_IFS,"Country Name")
eliminar_paises_repetidos <- function(datos, columna_paises, columna_inicial = 6) {
# Encontrar los países repetidos en la columna indicada
paises_repetidos <- datos[[columna_paises]][duplicated(datos[[columna_paises]])]
# Iterar sobre los países repetidos
for (pais in paises_repetidos) {
# Filtrar las filas correspondientes al país actual
filas_pais <- datos[[columna_paises]] == pais
# Calcular el número de datos no NA para cada columna a partir de la columna inicial
datos_pais <- datos[filas_pais, columna_inicial:ncol(datos)]
num_datos <- colSums(!is.na(datos_pais))
# Encontrar el índice de la columna con más datos no NA
indice_max_datos <- which.max(num_datos) + (columna_inicial - 1)
# Retener solo el país con más datos no NA
datos[filas_pais, ][seq_along(datos) != indice_max_datos] <- NA
}
# Eliminar filas duplicadas
datos <- datos[!duplicated(datos[[columna_paises]]), ]
# Devolver el resultado final sin países repetidos
return(datos)
}
x=eliminar_paises_repetidos(BM_IFS,"Country Name")
x=clean(serie,BM.IFS)
View(x)
qnorm(2.32,lower.tail = FALSE)
qnorm(2.32,lower.tail = True)
qnorm(2)
pnorm(2)
pnorm(2.32,lower.tail = FALSE)
sqrt(25)
1.4/5
